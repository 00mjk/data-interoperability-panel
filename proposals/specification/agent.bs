interop.treeAgent {#agent}
=====================

## Overview ## {#agent-overview}

[=Agents=] represent the primary actors in an interoperable Solid [=ecosystem=].

An [=Agent's=] <dfn>identity</dfn> is a unique URI that can be dereferenced to
an [=Agent=] instance, providing a pathway through which an [=Agent=] can
discover and access their data across the decentralized Web.

Other [=Agents=] and [=Applications=] can dereference an
[=Agent's=] [=identity=] to get the information they need to
interact with them.

An [=Agent=] is designed to be publicly accessible, but many of the
things the [=Agent=] links to are designed to be private, or accessible
only by other [=Agents=] and/or [=Applications=] that the [=Agent=]
has authorized.

A <dfn>Registry</dfn> is a place where an [=Agent=] can store and find
essential data needed to participate in the [=ecosystem=]. [=Agents=] use
several different types of [=Registries=], each of which serve a
particular purpose or function.

<table class="classinfo data" align="left" id="agentRegistries">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Registry</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Application Registry</td>
      <td>Records the [=Applications=] that a given [=Agent=] uses
      or has given access to.
      <i>See [[#appreg|Application Registration]]</i></td>
    </tr>
    <tr>
      <td>Data Registry</td>
      <td>Stores and organizes data types for interoperable use by different
      [=Applications=] and shared with other [=Agents=]
      <i>See [[#datareg|Data Registration]]</i></td>
    </tr>
    <tr>
      <td>Access Grant Registry</td>
      <td>Records access granted to other [=Agents=] and/or [=Applications=]
      <i>See [[#access|Access Grants]]</i></td>
    </tr>
    <tr>
      <td>Access Receipt Registry</td>
      <td>Tracks access that has been granted by other [=Agents=]
      <i>See [[#receipts|Access Receipts]]</i></td>
    </tr>
    <tr>
      <td>Remote Data Registry</td>
      <td>Local references to data that has been shared by other [=Agents=]
      <i>See [[#remote|Remote Data Registration]]</i></td>
    </tr>
  </tbody>
</table>

A given [=Agent=] may more than one instance of a given [=Registry=],
especially when the [=Agent=] has more than one pod, or is managing
data on behalf of another [=Agent=], in a [=Trusted Agent=] capacity.

A <dfn>Registry Set</dfn> is a collection of one or more [=Registries=] of
the same type, linked through the [=Agent=]. They allow one [=Agent=] to
link to many [=Registries=] across the Web, without exposing them in
a public resource.

## Data Model ## {#agent-datamodel}

### Summary ### {#datamodel-summary}

<figure>
  <img src="diagrams/agent-model.svg" width=100%/>
  <figcaption align="center">Agent data model</figcaption>
</figure>

An [=Agent=] links to different kinds of [=Registry Sets=] via type-specific
subproperties of [interop:hasRegistrySet](interop.ttl#hasRegistrySet).

[=Registry Sets=] links to any number of [=Registries=] via the
[interop:hasRegistry](interop.ttl#hasRegistry) property.

A <dfn>Registration</dfn> represents an individual unit of information
for a given [=Registry=]. [=Registries=] link to any number of
[=Registrations=] via the
[interop:hasRegistration](interop.ttl#hasRegistration) property.

<figure>
  <figcaption>[=Agent=] at https://alice.pod.example/profile/id#me</figcaption>
  <pre highlight="turtle">
  <#me>
    a interop:Agent;
    ######## Registry Sets ########
    interop:hasApplicationRegistrySet &lt;https://alice.pod.example/profile/application#set&gt; ;
    interop:hasDataRegistrySet &lt;https://alice.pod.example/profile/data#set&gt; ;
    interop:hasAccessGrantRegistrySet &lt;https://alice.pod.example/profile/access#set&gt; ;
    interop:hasAccessReceiptRegistrySet &lt;https://alice.pod.example/profile/receipt#set&gt; ;
    interop:hasRemoteDataRegistrySet &lt;https://alice.pod.example/profile/remote#set&gt; ;
  </pre>
</figure>

### Agent ### {#datamodel-agent}

An <dfn>Agent</dfn> is a distinct individual, group, organization, or piece
of software with an [=identity=] that can be strongly authenticated.

<table class="classinfo data" align="left" id="classAgent">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3 text-align=left>
        [Agent](interop.ttl#Agent)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasApplicationRegistrySet</td>
      <td>ApplicationRegistrySet</td>
      <td>Link to the [=Agent's=] [=Application Registry Set=]</td>
    </tr>
  </tbody>
</table>

The [AgentShape](#shexAgent) is used to validate an instance of the
[Agent](#classAgent) class.

<pre highlight="turtle" id="shexAgent">
<#AgentShape> {
  a [ interop:Agent ] ;
  interop:hasApplicationRegistrySet IRI
}
</pre>

The [AgentTree](interop.tree#agent-tree)
is assigned to a resource to ensure it will validate against the
[AgentShape](#shexAgent).

<pre highlight="turtle" id="treeAgent">
<#agent-tree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops#AgentShape&gt; ;
  st:matchesUriTemplate "id" .
</pre>

## Resource Hierarchy ## {#agent-hierarchy}

Instances of the classes and properties in the [[#datamodel-agent]]
are organized across different resources and pods for a given [=Agent=]
participating in the [=ystem=]. The instance data in resources are
validated by [=shapes=], which are associated with those resources
through [=shape trees=].

<figure>
  <figcaption>Example [=Registrar=] structure for an [=Agent=].
  Excludes some [=Registry=] types for clarity.</figcaption>
  <img src="diagrams/registrar-tree.svg" width=100%/>
</figure>

The [=Registrar=] linked to an [=Agent=]
is discovered by dereferencing their [=identity=]
(e.g. `https://alice.pod.example/profile/id#me`) to access their
[=identity profile document=], represented in
the figure above as `/id`.

The [=Registrar=] is stored in the RDF graph of the
`/registeries` container at `https://alice.pod.example/registries/#registrar`.
The [=Registrar=] instance links to a collection of type-specific
[=Registry Set=] instances stored in the `/registries` container.

The shape tree [interopt:registrar-tree](interop.tree#registrar-tree)
associated with the `/registries` container
specifies this resource structure. It assigns the
[interops:RegistrarShape](interop.shex#RegistrarShape) to validate
a [=Registrar=] instance in the graph of the container resource. It also assigns [interops:ApplicationRegistrySetShape](interop.shex#ApplicationRegistrySetShape)
and [interops:DataRegistrySetShape](interop.shex#DataRegistrySetShape)
to validate the
[interop:ApplicationRegistrySet](interop.ttl#ApplicationRegistrySet) and
[interop:DataRegistrySet](interop.ttl#DataRegistrySet)
instances in the contained resources.

<figure>
  <figcaption>[=Shape trees=], [=shapes=], and [=Registry Set=] resources
  associated with a [=Registrar=] container</figcaption>
  <img src="diagrams/registrar-registries.svg" width=100%/>
</figure>

A [=Registry Set=] resource of a specific type will link to one or more
[=Registry=] instances of the same type.

For example, the [=Application Registry Set=] at
`https://alice.pod.example/registries/application#set` links to two
[=Application Registry=] instances, one of them being
`https://alice.pod.example/applications/#registry`.

The [=Application Registry=] instance is stored in the RDF graph
of the `/applications` container at
`https://alice.pod.example/applications/#registry`. It links to a
collection of [=Application Registration=] instances stored in
the `/applications` container.

The shape tree
[interopt:application-registry-tree](interop.tree#application-registry-tree)
associated with the `/applications` container specifies this resource
structure. It assigns the
[interops:ApplicationRegistryShape](interop.shex#ApplicationRegistryShape)
to validate the [=Application Registry=] instance in the
container resource. It also assigns a
[interops:ApplicationRegistrationShape](interop.shex#ApplicationRegistrationShape)
to validate an [=Application Registration=] in every
contained resource.

<figure>
  <figcaption>[=Shape trees=], [=shapes=], and [=Application Registration=]
  resources associated with an [=Application Registry=] container</figcaption>
  <img src="diagrams/registrar-applications.svg" width=100%/>
</figure>

## Permission Model ## {#agent-permissions}

The permission model for the [=Registrar=] resources detailed in
[[#agent-hierarchy]] are illustrated in the table below. That said, the
following key points are worth noting:

* The [=identity profile document=] at `/id` is the only resource that is
    publicly accessible (with read-only privileges).
* The only information exposed is a link to Alice's [=Registrar=] at
    `/registries`, which is a protected document.
* Neither the types or locations of Alice's [=Registries=] are
    ever publicly exposed.

The [=Agent=] should be assumed to
have control-level access across her entire data space.

<figure>
<figcaption>Permission model for [=Registrar=] resources</figcaption>
  <table class="data permissions" align="left">
    <col>
    <colgroup></colgroup>
    <colgroup></colgroup>
    <colgroup span=2></colgroup>
    <colgroup span=2></colgroup>
    <thead>
      <tr>
        <th></th>
        <th scope="colgroup">Controller</th>
        <th scope="colgroup">Public</th>
        <th colspan=2 scope="colgroup">Selectively Trusted</th>
        <th colspan=2 scope="colgroup">Selectively Granted</th>
      </tr>
      <tr>
        <th scope="col">Resource</th>
        <th scope="col">Access</th>
        <th scope="col">Access</th>
        <th scope="col">Subject</th>
        <th scope="col">Access</th>
        <th scope="col">Subject</th>
        <th scope="col">Access</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>`/id`</td>
        <td>Control</td>
        <td>Read</td>
        <td>Identity Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`/registries/`</td>
        <td>Control</td>
        <td>-</td>
        <td>Trusted Agents</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /registries/application`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /registries/data`</td>
        <td>Control</td>
        <td>-</td>
        <td>Data Authorization Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`/applications/`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /applications/registration-123/`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>Registered App.</td>
        <td>Read</td>
      </tr>
      <tr>
        <td>`-- /applications/registration-123/*`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>Registered App.</td>
        <td>Write</td>
      </tr>
      <tr>
        <td>`/data/`</td>
        <td>Control</td>
        <td>-</td>
        <td>Data Authorization Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /data/registration-456/`</td>
        <td>Control</td>
        <td>-</td>
        <td>Data Authorization Agent</td>
        <td>Control</td>
        <td>Grantee</td>
        <td>Varies</td>
      </tr>
      <tr>
        <td>`-- /data/registration-456/*`</td>
        <td>Control</td>
        <td>-</td>
        <td>Data Authorization Agent</td>
        <td>Control</td>
        <td>Grantee</td>
        <td>Varies</td>
      </tr>
    </tbody>
  </table>
</figure>

## Operations ## {#agent-operations}
