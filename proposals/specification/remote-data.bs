Remote Data Registration {#remote}
=====================

## Overview ## {#remote-overview}

Issue: Write overview for Remote Data Registration

## Data Model ## {#remote-datamodel}

### Summary ### {#remote-datamodel-summary}

<figure id="fig-remote-model">
  <img src="diagrams/remote-model.svg" width=100%/>
  <figcaption>Data model for the [=Remote Data Registry=]</figcaption>
</figure>

An [=Agent=] links to [=Remote Data Registry Sets=] via the
[interop:hasRemoteDataRegistrySet](interop.ttl#hasAccessReceiptRegistrySet)
property.

A [=Remote Data Registry Set=] links to any number of
[=Remote Data Registries=] via
the [interop:hasRegistry](interop.ttl#hasRegistry) property.

A [=Remote Data Registry=] links to any number of registered
[=Remote Data Registrations=] via the
[interop:hasRegistration](interop.ttl#hasRegistration) property.

A [=Remote Data Registration=] may link to one or more
[=Remote Data Instances=] via the
[interop:hasRemoteDataInstance](interop.ttl#hasRemoteDataInstance) property.

<figure id="fig-remote-agent">
  <figcaption>[=Agent=] at https://alice.pod.example/profile/id#me
  linking to an [=Remote Data Registry Set=]</figcaption>
  <pre highlight="turtle">
  <#me>
    a interop:Agent;
    interop:hasRemoteDataRegistrySet &lt;https://alice.pod.example/profile/remote#set&gt; .
  </pre>
  </figure>
</figure>

<figure id ="fig-remote-registry-set">
   <figcaption>A [=Remote Data Registry Set=] at
   https://bob.pod.example/profile/remote#set linking to two different
  [=Remote Data Registries=]</figcaption>
  <pre highlight="turtle">
  <#set>
    a interop:RemoteDataRegistrySet;
    interop:hasRegistry &lt;https://bob.pod.example/remote/#registry&gt; ,
                    &lt;https://bob.otherpod.example/remote/#registry&gt; .
  </pre>
</figure>

<figure id="fig-remote-registry">
  <figcaption>An [=Remote Data Registry=] at
  https://bob.pod.example/remote/#registry
  linking to several registered [=Remote Data Registrations=]
  </figcaption>
  <pre highlight="turtle">
  <#registry>
    a interop:RemoteDataRegistry ;
    interop:hasRegistration &lt;f0ebbd29-3a5a-4770-af29-cdb7693066b4/#registration&gt; ,
                        &lt;265dff0c-b199-42d8-95b3-d1eaae91c412/#registration&gt; ,
                        &lt;f68e95eb-a61f-408c-8d83-c4f21dae6115/#registration&gt; .
  </pre>
</figure>

<figure id="fig-remote-registration">
  <figcaption>An [=Remote Data Registration=] at
  https://bob.pod.example/remote/f0ebbd29-3a5a-4770-af29-cdb7693066b4/#registration
  </figcaption>
  <pre highlight="turtle">
  <#registration>
    a interop:RemoteDataRegistration ;
    interop:registeredBy &lt;https://bob.pod.example/profile/id#me&gt; ;
    interop:registeredWith &lt;https://trusted.example/id#agent&gt; ;
    interop:registeredAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:updatedAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:providedAt "2020-09-05T06:16:01Z"^^xsd:dateTime ;
    interop:hasDataReceipt &lt;https://bob.pod.example/receipts/fa6d6553-0308-4abd-bce6-888df653695a#notebook-receipt&gt; ;
    interop:hasRegistration &lt;https://alice.pod.example/data/notebook-tree/#registration&gt; ;
    interop:registeredShapeTree note:notebook-tree ;
    interop:scopeOfDataGrant interop:SelectedInstances ;
    interop:accessMode acl:Read, acl:Write ;
    interop:hasRemoteDataInstance &lt;https://bob.pod.example/remote/f0ebbd29-3a5a-4770-af29-cdb7693066b4/cd04e76b-d64d-4cea-aacf-fb248a295002#instance&gt; ,
                              &lt;https://bob.pod.example/remote/f0ebbd29-3a5a-4770-af29-cdb7693066b4/9506b58f-3c36-4c0c-a698-712baf478deb#instance&gt; .
  </pre>
</figure>

<figure id="fig-remote-data-instance">
  <figcaption>An [=Remote Data Instance=] at
  https://bob.pod.example/remote/f0ebbd29-3a5a-4770-af29-cdb7693066b4/cd04e76b-d64d-4cea-aacf-fb248a295002
  </figcaption>
  <pre highlight="turtle">
  <#registration>
    a interop:RemoteDataInstance ;
    interop:registeredAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:updatedAt "2020-09-05T06:15:01Z"^^xsd:dateTime ;
    interop:providedAt "2020-09-05T06:16:01Z"^^xsd:dateTime ;
    interop:hasDataReceipt &lt;https://bob.pod.example/receipts/fa6d6553-0308-4abd-bce6-888df653695a#notebook-receipt&gt; ;
    interop:registeredShapeTree note:notebook-tree ;
    interop:accessMode acl:Read, acl:Write ;
    interop:hasRegisteredDataInstance &lt;https://alice.pod.example/data/notebook/notebook-1/#notebook&gt; .
  </pre>
</figure>

### Remote Data Registry Set ### {#datamodel-remote-registry-set}

A <dfn>Remote Data Registry Set</dfn> is a [=Registry Set=] specifically
made up of [=Remote Data Registries=].

<table class="classinfo data" align="left" id="classRemoteDataRegistrySet">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3 text-align=left>
        [RemoteDataRegistrySet](interop.ttl#RemoteDataRegistrySet)
        a rdfs:subClassOf [[#datamodel-agent|RegistrySet]]
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasRegistry</td>
      <td>Registry</td>
      <td>Link to associated [=Remote Data Registries=]</td>
    </tr>
  </tbody>
</table>

The [RemoteDataRegistrySetShape](#shexRemoteDataRegistrySet) is used to
validate an instance of the
[RemoteDataRegistrySet](#classRemoteDataRegistrySet) class.

<pre highlight="turtle" id="shexRemoteDataRegistrySet">
<#RemoteDataRegistrySetShape> {
  a [ interop:RemoteDataRegistrySet ] ;
  interop:hasRegistry IRI+
}
</pre>

The [RemoteDataRegistrySetTree](interop.tree#RemoteDataRegistrySetTree)
is assigned to a resource to ensure it will validate against the
[RemoteDataRegistrySetShape](#shexRemoteDataRegistrySet).

<pre highlight="turtle" id="treeRemoteDataRegistrySet">
<#RemoteDataRegistrySetTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops#RemoteDataRegistrySetShape&gt; ;
  st:matchesUriTemplate "receipt" .
</pre>

### Remote Data Registry ### {#datamodel-remote-data-registry}

A <dfn>Remote Data Registry</dfn> is a collection of
[=Remote Data Registrations=] stored in a specific location in a [=pod=].

<table class="classinfo data" align="left" id="classRemoteDataRegistry">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [RemoteDataRegistry](interop.ttl#RemoteDataRegistry)
        a rdfs:subClassOf [Registry](interop.ttl#Registry)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasRegistration</td>
      <td>[Registration](interop.ttl#Registration)</td>
      <td>Link to associated [=Remote Data Registrations=]</td>
    </tr>
  </tbody>
</table>

The [RemoteDataRegistryShape](#shexRemoteDataRegistry) is used to
validate an instance of the
[RemoteDataRegistry](#classRemoteDataRegistry) class.

<pre highlight="turtle" id="shexRemoteDataRegistry">
<#RemoteDataRegistryShape> {
  a [ interop:RemoteDataRegistry ] ;
  interop:hasRegistration IRI*
}
</pre>

The [RemoteDataRegistryTree](interop.tree#RemoteDataRegistryTree)
is assigned to a container resource to ensure that it will validate against the
[RemoteDataRegistryShape](#shexRemoteDataRegistry), and contain only
conformant instances of the
[RemoteDataRegistrationTree](#treeRemoteDataRegistration).

<pre highlight="turtle" id="treeRemoteDataRegistry">
<#RemoteDataRegistryTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeContainer ;
  st:validatedBy &lt;interops#RemoteDataRegistryShape&gt; ;
  st:contains <#RemoteDataRegistrationTree> ,
              st:AllowNone .
</pre>

### Remote Data Registration ### {#datamodel-remote-data-registration}

An [=Agent=] maintains a <dfn>Remote Data Registration</dfn> to represent
a [=Data Registration=] that another [=Agent=] has shared with them. It
may represent access to the entire [=Data Registration=], or only to a
select group of [=Remote Data Instances=] within.

A [=Remote Data Registration=] is created when an [=Agent=] receives an
[=Access Receipt=] from another [=Agent=] that includes access to a given
[=Data Registration=].

* A [=Remote Data Registration=] MUST be associated with a [=Data Receipt=]
* If an [=Access Receipt=] with a corresponding [=Data Receipt=] is received
    that changes the access to a shared [=Data Registration=], the
    corresponding [=Remote Data Registration=] MUST be updated, and
    removed altogether if that access is removed.

<table class="classinfo data" align="left" id="classRemoteDataRegistration">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [RemoteDataRegistration](interop.ttl#RemoteDataRegistration)
        a rdfs:subClassOf [Registration](interop.ttl#Registration)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredBy</td>
      <td>[Agent](#classAgent)</td>
      <td>[=Agent=] that registered the [=Remote Data Registration=]</td>
    </tr>
    <tr>
      <td>registeredWith</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] used to create the [=Remote Data Registration=]</td>
    </tr>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Remote Data Registration=] was created</td>
    </tr>
    <tr>
      <td>updatedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Remote Data Registration=] was updated</td>
    </tr>
    <tr>
      <td>providedAt</td>
      <td>xsd:dateTime</td>
      <td>When the [=Remote Data Instance=] was shared by remote [=Agent=]</td>
    </tr>
    <tr>
      <td>hasRegistration</td>
      <td>[DataRegistration](#classDataRegistration)</td>
      <td>Link to the [=Data Registration=] that was shared</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>Shape tree associated with the shared [=Data Registration=]</td>
    </tr>
    <tr>
      <td>scopeOfDataGrant</td>
      <td> interop:AllInstances, interop:InheritInstances,
      interop:SelectedInstances, interop:NoAccess</td>
      <td>Identifies the scope of access that was granted
        <ul>
          <li>interop:AllInstances - Scope includes
              access to all [=Registered Data Instances=] of the shared
              [=Data Registration=]</li>
          <li>interop:InheritInstances - Scope includes
              access to [=Registered Data Instances=] inherited by
              instances selected in the [=Data Receipt=] linked via
              interop:inheritsFrom</li>
          <li>interop:SelectedInstances - Scope includes
              access only to those [=Registered Data Instances=] specifically
              selected by the [=Agent=]</li>
          <li>interop:NoAccess - No access is granted</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Access modes granted on the shared [=Data Registration=]</td>
    </tr>
    <tr>
      <td>hasRemoteDataInstance</td>
      <td>[RemoteDataInstance](#classRemoteDataInstance)</td>
      <td>Link to [=Remote Data Instance=] associated with the
      [=Remote Data Registration=]</td>
    </tr>
    <tr>
      <td>hasDataReceipt</td>
      <td>[DataReceipt](#classDataReceipt)</td>
      <td>Link to [=Data Receipt=] that granted this shared access</td>
    </tr>
  </tbody>
</table>

The [RemoteDataRegistrationShape](#shexRemoteDataRegistration) is used to
validate an instance of the
[RemoteDataRegistration](#classRemoteDataRegistration) class.

<pre highlight="turtle" id="shexRemoteDataRegistration">
<#RemoteDataRegistration> {
  a [interop:RemoteDataRegistration] ;
  interop:registeredBy IRI ;
  interop:registeredWith IRI ;
  interop:registeredAt xsd:dateTime ;
  interop:providedAt xsd:dataTime ;
  interop:updatedAt xsd:dateTime ;
  interop:hasRegistration IRI ;           # Remote data registration
  interop:registeredShapeTree IRI ;       # Associated shape tree
  interop:scopeOfDataGrant [ interop:SelectedInstances
                         interop:AllInstances
                         interop:InheritInstances
                         interop:NoAccess ]+ ;
  interop:accessMode [ acl:Read acl:Write acl:Append acl:Control ]+ ;
  interop:hasRemoteDataInstance IRI* ;    # if specific instances are selected or inherited
  interop:hasDataReceipt IRI+ ;         # Associated data receipts
}
</pre>

The [RemoteDataRegistrationTree](interop.tree#RemoteDataRegistrationTree)
is assigned to a resource via the
[RemoteDataRegistryTree](#treeRemoteDataRegistry), and ensures
that the assigned resource will validate against the
[RemoteDataRegistrationShape](#shexRemoteDataRegistration).

<pre highlight="turtle" id="treeRemoteDataRegistration">
<#RemoteDataRegistrationTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeContainer ;
  st:validatedBy &lt;interops#RemoteDataRegistrationShape&gt; ;
  st:matchesUriTemplate "{id}" ;
  st:contains <#RemoteDataInstanceTree> ,
              st:AllowNone .
</pre>

### Remote Data Instance ### {#datamodel-remote-data-instance}

An [=Agent=] maintains a <dfn>Remote Data Instance</dfn> to represent
a [=Registered Data Instance=] that another [=Agent=] has shared with them.

A [=Remote Data Instance=] is created when an [=Agent=] receives an
[=Access Receipt=] from another [=Agent=] that includes access to a specific
[=Registered Data Instance=].

* A [=Remote Data Instance=] MUST be associated with a [=Data Receipt=]
* If an [=Access Receipt=] is received with a corresponding [=Data Receipt=]
    that changes the access to a shared
    [=Registered Data Instance=], the corresponding [=Remote Data Instance=]
    MUST be updated, and removed altogether if that access is removed.

<table class="classinfo data" align="left" id="classRemoteDataInstance">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th colspan=3>
        [RemoteDataInstance](interop.ttl#RemoteDataInstance)
      </th>
    </tr>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>registeredAt</td>
      <td>xsd:dateTime</td>
      <td>When the [=Remote Data Instance=] was created</td>
    </tr>
    <tr>
      <td>updatedAt</td>
      <td>xsd:dateTime</td>
      <td>When the [=Remote Data Instance=] was last updated</td>
    </tr>
    <tr>
      <td>providedAt</td>
      <td>xsd:dateTime</td>
      <td>When the [=Remote Data Instance=] was shared by remote [=Agent=]</td>
    </tr>
    <tr>
      <td>hasRegisteredDataInstance</td>
      <td>[=Registered Data Instance=]</td>
      <td>Link to [=Registered Data Instance=] associated with the
      [=Remote Data Instance=]</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>Shape tree associated with the shared [=Registered Data Instance=]</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>acl:Read, acl:Write, acl:Control, acl:Append</td>
      <td>Access modes granted on the shared [=Registered Data Instance=]</td>
    </tr>
    <tr>
      <td>hasDataReceipt</td>
      <td>[DataReceipt](#classDataReceipt)</td>
      <td>Link to [=Data Receipt=] that granted this shared access</td>
    </tr>
  </tbody>
</table>

The [RemoteDataInstanceShape](#shexRemoteDataInstance) is used to
validate an instance of the
[RemoteDataInstance](#classRemoteDataInstance) class.

<pre highlight="turtle" id="shexRemoteDataInstance">
<#RemoteDataInstance> {
  a [interop:RemoteDataInstance] ;
  interop:hasRegisteredDataInstance IRI ; # Remote registered data instance
  interop:registeredAt xsd:dateTime ;
  interop:providedAt xsd:dataTime ;
  interop:registeredShapeTree IRI ;       # Associated shape tree
  interop:accessMode [ acl:Read acl:Write acl:Append acl:Control ]+ ;
  interop:hasDataReceipt IRI+ ;         # Associated data receipts
}
</pre>

The [RemoteDataInstanceTree](interop.tree#RemoteDataInstanceTree)
is assigned to a resource via the
[RemoteDataInstanceTree](#treeRemoteDataInstance), and ensures
that the assigned resource will validate against the
[RemoteDataInstanceShape](#shexRemoteDataInstance).

<pre highlight="turtle" id="treeRemoteDataInstance">
<#RemoteDataInstanceTree>
  a st:ShapeTree;
  st:expectsType st:ShapeTreeResource ;
  st:validatedBy &lt;interops#RemoteDataInstanceShape&gt; ;
  st:matchesUriTemplate "{id}" .
</pre>

## Resource Hierarchy ## {#remote-hierarchy}

<table class="data tree" align="left">
  <col>
  <col>
  <col>
  <col>
  <thead>
    <tr>
      <th>Resource</th>
      <th>Class</th>
      <th>Shape</th>
      <th>Shape Tree</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>`/profile/`</td>
      <td>-</td>
      <td>-</td>
      <td>[ProfileTree](#treeAgent)</td>
    </tr>
    <tr>
      <td>`-- remote#set`</td>
      <td>[RemoteDataRegistrySet](#classRemoteDataRegistrySet)</td>
      <td>[RemoteDataRegistrySetShape](#shexRemoteDataRegistrySet)</td>
      <td>[RemoteDataRegistrySetTree](#treeRemoteDataRegistrySet)</td>
    </tr>
    <tr>
      <td>`/remote/#registry`</td>
      <td>[RemoteDataRegistry](#classRemoteDataRegistry)</td>
      <td>[RemoteDataRegistryShape](#shexRemoteDataRegistry)</td>
      <td>[RemoteDataRegistryTree](#treeRemoteDataRegistry)</td>
    </tr>
    <tr>
      <td>`-- f0ebbd29...b4/#registration`</td>
      <td>[RemoteData](#classRemoteDataRegistration)</td>
      <td>[RemoteDataRegistrationShape](#shexRemoteDataRegistration)</td>
      <td>[RemoteDataRegistrationTree](#treeRemoteDataRegistration)</td>
    </tr>
    <tr>
      <td>`---- cd04e76b...02#instance`</td>
      <td>[RemoteDataInstance](#classRemoteDataInstance)</td>
      <td>[RemoteDataInstanceShape](#shexRemoteDataInstance)</td>
      <td>[RemoteDataInstanceTree](#treeRemoteDataInstance)</td>
    </tr>
    <tr>
      <td>`---- 9506b58f...eb#instance`</td>
      <td>[RemoteDataInstance](#classRemoteDataInstance)</td>
      <td>[RemoteDataInstanceShape](#shexRemoteDataInstance)</td>
      <td>[RemoteDataInstanceTree](#treeRemoteDataInstance)</td>
    </tr>
  </tbody>
</table>

The [=Remote Data Registry Set=] and the [=Remote Data Registry=]
<em class="rfc2119">MAY</em> or <em class="rfc2119">MAY NOT</em>
be on the same [=pod=].

[=Remote Data Registry Set=] and [=Remote Data Registry=] resources
<em class="rfc2119">MAY</em> use any resource or subject names.

[=Remote Data Registrations=] and [=Remote Data Instances=]
<em class="rfc2119">MUST</em> use \[UUIDs](https://www.ietf.org/rfc/rfc4122.txt)
for resource names.

## Operations ## {#remote-operations}

### Update Remote Data ### {#remote-update}

#### Inputs #### {#updateremote-inputs}

* Let `RECEIPT` be an [=Access Receipt=]
* Let `REGISTRY` be an [=Remote Data Registry=]

#### Outputs #### {#updateremote-outputs}

* Let `RECEIPT` be an [=Access Receipt=] updated with remote data associations

#### Operation Details #### {#updateremote-details}

1. For each [=Data Receipt=] `DRECEIPT` linked via `RECEIPT hasDataReceipt`
    1. Let `REMOTEDR` be a [=Remote Data Registration=] returned from
        [[#remote-loadremotedr]] with inputs:
        `DRECEIPT hasRegistration`, `REGISTRY`
        1. If `REMOTEDR` is not empty
            1. Call [[#remote-updateremotedr]] with inputs:
                `REMOTEDR`, `DRECEIPT`, `RECEIPT`
        1. If `REMOTEDR` is empty
            1. Next if `DRECEIPT scopeOfDataGrant` is `interop:NoAccess`
            1. Call [[#remote-createremotedr]] with inputs:
                `RECEIPT`, `DRECEIPT`, `REGISTRY`

### Create Remote Data Registration ### {#remote-createremotedr}

#### Inputs #### {#createremotedr-inputs}

* Let `DRECEIPT` be a [=Data Receipt=]
* Let `RECEIPT` be a [=Access Receipt=]
* Let `REGISTRY` be a [=Remote Data Registry=]

#### Outputs #### {#createremotedr-outputs}

* A created [=Remote Data Registration=]

#### Operation Details #### {#createremotedr-details}

1. <em class="rfc2119">MUST</em> return error if
    `DRECEIPT scopeOfDataGrant` includes `interop:SelectedInstances` or
    `interop:inheritInstances` and `DRECEIPT hasRegisteredDataInstance` is empty
1. Let `REMOTEDR` be an empty [=Remote Data Registration=]
1. Let `REMOTEDR registeredBy` be the current [=Agent=]
1. Let `REMOTEDR registeredWith` be the current [=Application=]
1. Let `REMOTEDR registeredAt` be the current timestamp
1. Let `REMOTEDR updatedAt` be the current timestamp
1. Let `REMOTEDR providedAt` be `RECEIPT providedAt`
1. Let `REMOTEDR hasDataReceipt` be `DRECEIPT`
1. Let `REMOTEDR hasRegistration` be `DRECEIPT hasRegistration`
1. Let `REMOTEDR registeredShapeTree` be `DRECEIPT registeredShape`
1. Let `REMOTEDR scopeOfDataGrant`s be `DRECEIPT scopeOfDataGrant`s
1. Let `REMOTEDR accessMode`s be `DRECEIPT accessMode`s
1. If `DRECEIPT scopeOfDataGrant` is `interop:AllInstances`
    1. Let `REMOTEDR scopeOfDataGrant` be `interop:AllInstances`
1. If `DRECEIPT scopeOfDataGrant` is `interop:SelectedInstances`
    AND/OR `interop:InheritInstances`
    1. For each [=Registered Data Instance=] `RDI` linked via
        `DRECEIPT hasRegisteredDataInstance`
        1. Let `REMOTEDR hasRemoteDataInstance` be linked with the
            [=Remote Data Instance=] returned from [[#remote-createremotedi]]
            with inputs: `REMOTEDR`, `RDI`, `DRECEIPT`, `RECEIPT`

### Create Remote Data Instance ### {#remote-createremotedi}

#### Inputs #### {#createremotedi-inputs}

* Let `REMOTEDR` be a [=Remote Data Registration=]
* Let `RDI` be a [=Registered Data Instance=]
* Let `DRECEIPT` be a [=Data Receipt=]
* Let `RECEIPT` be an [=Access Receipt=]

#### Outputs #### {#createremotedi-outputs}

* A [=Remote Data Instance=] for `RDI`

#### Operation Details #### {#createremotedi-details}

1. Let `REMOTEDI` be an empty [=Remote Data Instance=]
1. Let `REMOTEDI registeredAt` be the current timestamp
1. Let `REMOTEDI updatedAt` be the current timestamp
1. Let `REMOTEDI providedAt` be `RECEIPT providedAt`
1. Let `REMOTEDI registeredShapeTree` be `DRECEIPT registeredShapeTree`
1. Let `REMOTEDI accessMode`s be `DRECEIPT accessMode`s
1. Let `REMOTEDR hasDataReceipt` be `DRECEIPT`
1. Let `REMOTEDR hasRegisteredDataInstance` be
    `DRECEIPT hasRegisteredDataInstance`

### Update Remote Data Registration ### {#remote-updateremotedr}

#### Inputs #### {#updateremotedr-inputs}

* Let `REMOTEDR` be a [=Remote Data Registration=] to update
* Let `DRECEIPT` be a [=Data Receipt=]
* Let `RECEIPT` be a [=Access Receipt=]

#### Outputs #### {#updateremotedr-outputs}

* An updated [=Remote Data Registration=]

#### Operation Details #### {#updateremotedr-details}

1. <em class="rfc2119">MUST</em> return error if `REMOTEDR providedAt`
    is later than `RECEIPT providedAt`
1. If `REMOTEDR hasDataReceipt` is not `DRECEIPT`
    1. Let `OLDDRECEIPT` be `REMOTEDR hasDataReceipt`
    1. Let `REMOTEDR hasDataReceipt` be  `DRECEIPT`
    1. Let `OLDRECEIPT replacedBy` be `DRECEIPT`
    1. Let `OLDRECEIPT updatedAt` be the current timestamp
1. Let `REMOTEDR accessMode`s be `DRECEIPT accessMode`s
1. If `DRECEIPT scopeOfDataGrant` is `interop:NoAccess`
    1. Let `REMOTEDR scopeOfDataGrant` be `interop:NoAccess`
    1. Let `REMOTEDR accessMode` be empty
    1. For each [=Remote Data Instance=] `REMOTEDI` linked via
        `REMOTEDR hasRemoteDataInstance`
        1. Delete `REMOTEDI`
        1. Remove `REMOTEDR hasRemoteDataInstance` link to `REMOTEDI`
1. If `DRECEIPT scopeOfDataGrant` is `interop:AllInstances`
    1. For each [=Remote Data Instance=] `REMOTEDI` linked via
        `REMOTEDR hasRemoteDataInstance`
        1. Delete `REMOTEDI`
        1. Remove `REMOTEDR hasRemoteDataInstance` link to `REMOTEDI`
1. If `DRECEIPT scopeOfDataGrant` is `interop:SelectedInstances` or
    `interop:InheritInstances`
    1. For each [=Remote Data Instance=] `REMOTEDI` linked via
        `REMOTEDR hasRemoteDataInstance`
        1. Delete `REMOTEDI`
        1. Remove `REMOTEDR hasRemoteDataInstance` link to `REMOTEDI`
    1. For each [=Registered Data Instance=] `RDI` linked via
        `DRECEIPT hasRegisteredDataInstance`
        1. Let `REMOTEDR hasRemoteDataInstance` be linked with the
            [=Remote Data Instance=] returned from [[#remote-createremotedi]]
            with inputs: `REMOTEDR`, `RDI`, `DRECEIPT`, `RECEIPT`
1. Let `REMOTEDR updatedAt` be the current timestamp
1. Return `REMOTEDR`

Issue: It might be more elegant to not wipe out the remote data instances
and recreate them with changes.

Issue: Someone should be able to grant a given [=Agent=] different modes of
access for different selected instances in a given registration.

### Load Remote Data Registration ### {#remote-loadremotedr}

#### Inputs #### {#loadremotedr-inputs}

* Let `DATAREG` be a [=Data Registration=] to lookup
* Let `REGISTRY` be a [=Remote Data Registry=] to load from

#### Outputs #### {#loadremotedr-outputs}

* A [=Remote Data Registration=] corresponding to `REMOTEDR`

#### Operation Details #### {#loadremotedr-details}

1. For each [=Remote Data Registration=] `REMOTEDR` in `REGISTRY`
    1. return `REMOTEDR` if `REMOTEDR hasRegistration` == `DATAREG`
