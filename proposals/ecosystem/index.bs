<pre class="metadata">
Title: Proposal for an Interoperable Solid Ecosystem
Shortname: your-spec
Level: 1
Max ToC Depth: 2
Status: w3c/ED
Group: w3c
URL: https://solid.github.io/data-interoperability-panel/ecosystem/
Editor: Justin Bingham
Editor: Eric Prud'hommeaux
Editor: Josh Collins
Markup Shorthands: markdown yes
Abstract:
  A proposal for a Solid ecosystem that supports data interoperability across
  applications while enabling secure collaboration and query using intuitive
  data boundaries without changing the fundamentals of Solid, presented in the
  form of an end-to-end use case.
</pre>

<!-- For bikeshed style overrides -->
<style>
table.permissions thead tr {
  font-size: 12px;
}

table.permissions tbody tr:nth-child(even) {
  background-color: lightgray;
  font-size: 10px;
}

table.permissions tbody td {
  font-size: 10px;
}

pre {
  font-size: .8em;
}

figcaption {
  text-align: left;
}

a[data-link-type=dfn] {
  color: #000000;
}

a[href*=".ttl"] {
  color: #339966;
  border-bottom: 1px solid #339966;
}

a[href*=".shex"] {
  color: #cc2900;
  border-bottom: 1px solid #cc2900;
}

a[href*=".tree"] {
  color: #e68a00;
  border-bottom: 1px solid #e68a00;
}

</style>

Problems and Goals {#problems-goals}
=====================

Solid affords us the opportunity to create a valuable and
powerful ecosystem where people and organizations retain control of their data,
but are also able to put it to work and use it to its full potential. The
fundamentals of Solid make this possible, but further definition of standard
methods and mechanisms must be established to make it practical, intuitive, and
secure.

<div class="assertion">

[Problem #1](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#problem-1---disparate-applications-cannot-practically-interoperate-over-the-same-data-safely-and-effectively) -
    Disparate applications cannot practically interoperate over the same data
    safely and effectively.

* <b>[Goal](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#goal-1---seamless-data-interoperability-across-disparate-applications) -
    Seamless data interoperability across disparate applications.</b>

[Problem #2](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#problem-2---people-must-be-able-to-understand-what-data-they-have-to-effectively-use-it-or-share-it-safely) -
    People must be able to understand what data they have to effectively use it
    or share it safely.

* <b>[Goal](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#goal-2---use-intuitive-data-boundaries-to-provide-human-to-machine-interoperability) -
    Use intuitive data boundaries to provide human to machine interoperability.</b>

[Problem #3](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#problem-3---disparate-entities-using-different-applications-must-be-able-to-safely-and-effectively-interoperate-within-their-scope-of-authorization) -
    Disparate entities using different applications must be able to
    safely and effectively interoperate within their scope of authorization.

* <b>[Goal](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#goal-3---secure-collaboration-over-intuitive-data-boundaries) -
    Secure collaboration over intuitive data boundaries.</b>

[Problem #4](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#problem-4---people-shouldnt-need-to-think-about-how-to-physically-organize-their-data-to-use-solid) -
    People shouldn’t need to think about how to physically organize
    their data to use Solid.

* <b>[Goal](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#goal-4---standard-and-flexible-organizing-model-for-data) -
    Standard and flexible organizing model for data.</b>

[Problem #5](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#problem-5---when-data-is-stored-and-secure-it-should-be-queryable-using-any-mechanism-and-able-to-be-requested-in-different-representations) -
    When data is stored and secure, it should be queryable using any
    mechanism, and able to be requested in different representations.

* <b>[Goal](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#goal-5---flexibility-and-support-for-different-and-evolving-query-mechanisms) -
    Flexibility and support for different and evolving query mechanisms.</b>

[Problem #6](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#problem-6---these-problems-must-be-solvable-using-the-fundamentals-of-solid-as-it-exists-today) -
    These problems must be solvable using the fundamentals of Solid
    as it exists today.

* <b>[Goal](https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md#goal-6---optimize-and-extend-but-do-not-change-solid-fundamentals) -
    Optimize and extend, but do not change Solid fundamentals.</b>

</div>

We must be able to support data interoperability across applications while
enabling secure collaboration and query using intuitive data boundaries.

Diversity in how the same data will be accessed and manipulated by different
entities and applications exacerbates the need for reliable mechanisms that
protect against data corruption, data leakage, or broken workflows

Standard methods and mechanisms for interoperability, collaboration, and
security of data in a Solid Pod must realize these needs, and it must be done
without changing the fundamentals of Solid.

Note: See [[PROBLEMS-AND-GOALS]] for a detailed explanation of each discrete
problem.

Proposal {#proposal}
=====================

In this proposal, we aim to address the stated problems and associated goals
by providing straightforward patterns that can be used in concert to realize
an interoperable [=ecosystem=] for [=Solid=]. To aid in understanding,
we include a reference use case that incorporates key elements of the proposal
in context for the reader.

We introduce [=shape trees=] as a fundamental means through which we model,
validate, organize, and authorize data stored in a Solid [=pod=]. Data becomes
durable, interoperable, and available to be retrieved in different
representations or discovered through any query mechanism.

Nowhere in this proposal does an [=agent=] or
[=application=] need to worry about where to store data, or where to find it.
Data is organized and shared using intuitive data boundaries
provided by [=shape trees=], making it easy for Alice, Bob, and their respective
applications to interoperate with each other in a way that they all understand.
In concert with [=acl resources=], this organization scheme facilitates
straightforward compartmentalized access by [=authenticated agents=] and
[=applications=], and allows them to operate using the least amount of
privilege necessary to complete their tasks.


We introduce patterns for [[#appreg|registering applications]], authorizing
access to data, keeping track of access grants, and of remote resources
for which access has been granted to the [=resource controller=].
[=trusted agents|Trusted Agents=] perform important actions for the
[=resource controller's=] with escalated privileges to help her securely
manage her data and make informed, intuitive, and secure decisions.

Most importantly, this proposal can work with Solid as it exists today, on its
own or alongside other conventions, with some caveats.

<div class="assertion">

* Identifying the [=ApplicationID=] in an [=acl resource=] statement
    requires [[WAC]] extension and IdP support. This proposal still works
    without this, but you would no longer be able to compartmentalize
    access between [=user-piloted applications=] in use by the
    [=resource controller=].
* This proposal assumes support for [=shape=] validation on the [=Solid=]
    server. It will still work without this support, but will significantly
    hamper data durability, integrity, and interoperability. Similarly,
    it doesn't require the server to perform [=shape tree=] validation,
    but more reliable and durable interoperability would be achieved with
    server-side support.

</div>

Reference Use Case {#usecase}
=====================

In our use case, Alice wants to use a new application to record and manage
her personal and professional notes. She does a Web search and finds
NeverNote (https://nevernote.example), a single-page (SPA) web-based
application that advertises itself as *solid enabled*. Alice is excited
about this because she recently created a Solid Pod for herself
at https://alice.pod.example.

When Alice brings up NeverNote in her
web browser, she is prompted to authenticate with her [=WebID=] because
NeverNote doesn’t know who she is yet, nor is it permitted to send
authenticated requests to her pod.

## Alice registers NeverNote ## {#alice-registers}

Alice logs into her [=identity provider=] (`https://idp.example`) with her
WebID (`https://alice.pod.example/id#me`), and receives
a [=token=] that NeverNote can use to make requests to her pod.
The token identifies her as Alice (`https://alice.pod.example/id#me`),
using NeverNote (`https://nevernote.example/id#agent`).

At this point, NeverNote isn't sure whether Alice is a brand new user of
NeverNote, or an existing user with stored preferences and caches, who has
granted NeverNote access to her notebook and note data.

To determine whether Alice has already registered NeverNote, NeverNote
[[#appreg-lookup|looks for an application registration]] for itself through
Alice's [[#reg]]. If no registration is found, NeverNote will go through
a quick [[#appreg-new|registration process]]. If there is already an
existing registration for NeverNote, no additional
steps are necessary, and NeverNote is able to access the registration entry
subject to the limitations of the [[#appreg-permissions]], in accordance with
the [[#appreg-structure]] of the resource hierarchy.

## Alice grants NeverNote access to data ## {#alice-authorizes}

Issue: Complete Data Registration and Data Authorization and update this
section.

* Through the help of her Authorization Agent, Alice grants NeverNote the
    following privileges:
  * Access to Notes that already existed in her Pod
  * Ability to create new Notes that NeverNote will have permission to manage
  * Ability to create new Notebooks that NeverNote will have permission to manage

## Alice collaborates with Bob ## {#alice-collaborates}

Issue: Complete Collaborative Access then update this section.

* Alice and Bob collaborate on a Notebook in Alice’s Pod. Bob is using a
    different application than NeverNote called OtherNote.


Agent {#ecoagent}
=====================

An [=Agent=] is a distinct individual, group, or piece of
software with an identity that can be strongly authenticated. They are
the primary actors in the Solid [=ecosystem=].

Agents have [=identities=], and dereferencing those identities leads
to [=identity profile documents=] that let other agents and applications
participating in the ecosystem know how to interact with them.

Even the applications that the agent uses directly find their way to
the agent's data through the agent's identity.

Agents are represented by the `eco:Agent` class.

Issue: Expand this text further to demonstrate the association with the
traditional identity profile document when dereferencing a webid, with
data model, structure/validation, and perms.

Registrar {#reg}
=====================

A [=Registrar=] provides [=Registries=] where an [=Agent=] can register,
store, and lookup essential data needed to participate in the ecosystem.
It supports key functions like application registration,
organizing and tracking data, and more.

* [[#appreg]] uses [=Application Registries=] to manage
    [=Application Registrations=].
* Data Registration relies on data registries to organize,
    store, and find registered data.
* Access registries let agents track and communicate access grants to
    resources they control.
* Agents track and manage data that has been shared with them through
    remote registries.


## Registrar Data Model ## {#reg-model}

<figure>
  <img src="registrar-model.svg" width=100%/>
  <figcaption align="center">Top level registrar data model</figcaption>
</figure>


Humans, software, or device [=Agents=] participating in the Solid ecosystem
are represented by the class [eco:Agent](ecosystem.ttl#Agent). Each
[=Agent=] has a [=Registrar=], represented by the class
[eco:Registrar](ecosystem.ttl#Registrar).

<figure>
  <figcaption>[=Agent=] at https://alice.pod.example/id#me linking to
  [=Registrar=]</figcaption>
  <pre highlight="turtle">
  <#me>
    a eco:Agent;
    eco:hasRegistrar &lt;https://alice.pod.example/registries/#registrar&gt; .
  </pre>
</figure>

A [=Registrar=] links to a number of [=Registry Sets=]. [=Registry Sets=] are
represented by the class [eco:RegistrySet](ecosystem.ttl#RegistrySet).
They are collections of one or more linked [=Registries=]. They are almost
always focused on a single [=Registry=] type, through type-specific
subclasses like
[eco:ApplicationRegistrySet](ecosystem.ttl#ApplicationRegistySet).

A given [=Registrar=] is linked to a [=Registry Set=] via the
[eco:hasRegistrySet](ecosystem.ttl#hasRegistrySet) property, or through
type-specific sub-properties like
[eco:hasApplicationRegistrySet](ecosystem.ttl#hasApplicationRegistrySet).

<figure>
  <figcaption>[=Registrar=] at
  https://alice.pod.example/registries/#registrar linking to
  [=Registry Sets=]</figcaption>
  <pre highlight="turtle">
  <#registrar>
    a eco:Registrar;
    eco:hasApplicationRegistrySet &lt;https://alice.pod.example/registries/application#set&gt; ;
    eco:hasDataRegistrySet &lt;https://alice.pod.example/registries/data#set&gt; .
  </pre>
  </figure>
</figure>

A [=Registry=] is a place where an [=Agent=] can register, store, and lookup
essential data needed to participate in the [=ecosystem=]. It is represented
by the [eco:Registry](ecosystem.ttl#Registry) class.

A given [=Registry Set=] links to any number of [=Registries=] via the
[eco:hasRegistry](ecosystem.ttl#hasRegistry) property.

This applies to type-specific to subclasses as well. For example, an
[=Application Registry Set=] links to any number of [=Application Registries=]
via the same [eco:hasRegistry](ecosystem.ttl#hasRegistry) property.

<figure>
  <figcaption>[=Application Registry Set=] linking to two different
  [=Application Registries=]</figcaption>
  <pre highlight="turtle">
  <#set>
    a eco:ApplicationRegistrySet;
    eco:hasRegistry &lt;https://alice.pod.example/applications/#registry&gt; ,
                    &lt;https://alice.otherpod.example/applications/#registry&gt; .
  </pre>
</figure>

[=Registries=] exist to store and catalog [=Registrations=], each of which
represents an individual unit of information for a given [=Registry=].
[=Registrations=] are represented by the `eco:Registration` class.

A given [=Registry=] links to any number of [=Registrations=] via the
[eco:hasRegistration](ecosystem.ttl#hasRegistration) property.

This applies to type-specific to subclasses as well, which are the normal
mode of use. For example, an
[=Application Registry=] links to any number of [=Application Registrations=]
via the [eco:hasRegistration](ecosystem.ttl#hasRegistration) property.

<figure>
  <figcaption>[=Application Registry=] linking to three
  [=Application Registration=] instances</figcaption>
  <pre highlight="turtle">
  <#registry>
    a eco:ApplicationRegistry ;
    eco:hasRegistration &lt;https://alice.pod.example/applications/02f9d4221d9e5c0ae/#registration&gt ,
                        &lt;https://alice.pod.example/applications/6fe4221d0589d7bde/#registration&gt ,
                        &lt;https://alice.pod.example/applications/543ab04333ba5bcc2/#registration&gt .
  </pre>
</figure>

The properties and associated data of a given [=Registration=]
may vary widely depending on the type of [=Registry=] it is
associated with. However, a number of general properties are inherited from
the base [=Registration=] class
[eco:Registration](ecosystem.ttl#Registration). In the following
example, all properties except for
[eco:registeredApplication](ecosystem.ttl#registeredApplication)
are inherited from
[eco:Registration](ecosystem.ttl#Registration).

<figure>
  <figcaption>An [=Application Registration=] instance</figcaption>
  <pre highlight="turtle" line-highlight="5" line-numbers="true">
  <#registration>
    a eco:ApplicationRegistration ;
    eco:registeredBy &lt;https://alice.pod.example/id#me&gt; ;
    eco:registeredWith &lt;https://trusted.example/ar&gt; ;
    eco:registeredApplication &lt;https://nevernote.example/id#agent&gt; ;
    eco:registeredAt "2020-04-04T20:15:47.000Z"^^xsd:dateTime .
  </pre>
</figure>

## Structure and Validation ## {#reg-structure}

Instances of the classes and properties in the [[#reg-model]]
are organized across different resources and pods for a given [=Agent=]
participating in the [=ecosystem=]. The instance data in resources are
validated by [=shapes=], which are associated with those resources
through [=shape trees=].

<figure>
  <figcaption>Example [=Registrar=] structure for an [=Agent=].
  Excludes some [=Registry=] types for clarity.</figcaption>
  <img src="registrar-tree.svg" width=100%/>
</figure>

The [=Registrar=] linked to an [=Agent=]
is discovered by dereferencing their [=identity=]
(e.g. `https://alice.pod.example/id#me`) to access their
[=identity profile document=], represented in
the figure above as `/id`.

The [=Registrar=] is stored in the RDF graph of the
`/registeries` container at `https://alice.pod.example/registries/#registrar`.
The [=Registrar=] instance links to a collection of type-specific
[=Registry Set=] instances stored in the `/registries` container.

The shape tree [ecot:registrar-tree](ecosystem.tree#registrar-tree)
associated with the `/registries` container
specifies this resource structure. It assigns the
[ecos:RegistrarShape](ecosystem.shex#RegistrarShape) to validate
a [=Registrar=] instance in the graph of the container resource. It also assigns [ecos:ApplicationRegistrySetShape](ecosystem.shex#ApplicationRegistrySetShape)
and [ecos:DataRegistrySetShape](ecosystem.shex#DataRegistrySetShape)
to validate the
[eco:ApplicationRegistrySet](ecosystem.ttl#ApplicationRegistrySet) and
[eco:DataRegistrySet](ecosystem.ttl#DataRegistrySet)
instances in the contained resources.

<figure>
  <figcaption>[=Shape trees=], [=shapes=], and [=Registry Set=] resources
  associated with a [=Registrar=] container</figcaption>
  <img src="registrar-registries.svg" width=100%/>
</figure>

A [=Registry Set=] resource of a specific type will link to one or more
[=Registry=] instances of the same type.

For example, the [=Application Registry Set=] at
`https://alice.pod.example/registries/application#set` links to two
[=Application Registry=] instances, one of them being
`https://alice.pod.example/applications/#registry`.

The [=Application Registry=] instance is stored in the RDF graph
of the `/applications` container at
`https://alice.pod.example/applications/#registry`. It links to a
collection of [=Application Registration=] instances stored in
the `/applications` container.

The shape tree
[ecot:application-registry-tree](ecosystem.tree#application-registry-tree)
associated with the `/applications` container specifies this resource
structure. It assigns the
[ecos:ApplicationRegistryShape](ecosystem.shex#ApplicationRegistryShape)
to validate the [=Application Registry=] instance in the
container resource. It also assigns a
[ecos:ApplicationRegistrationShape](ecosystem.shex#ApplicationRegistrationShape)
to validate an [=Application Registration=] in every
contained resource.

<figure>
  <figcaption>[=Shape trees=], [=shapes=], and [=Application Registration=]
  resources associated with an [=Application Registry=] container</figcaption>
  <img src="registrar-applications.svg" width=100%/>
</figure>

## Permission Model ## {#reg-permissions}

The permission model for the [=Registrar=] resources detailed in [[#reg-structure]]
are illustrated in the table below. That said, the following key points
are worth noting:

* The [=identity profile document=] at `/id` is the only resource that is
    publicly accessible (with read-only privileges).
* The only information exposed is a link to Alice's [=Registrar=] at
    `/registries`, which is a protected document.
* Neither the types or locations of Alice's [=Registries=] are
    ever publicly exposed.

The [=resource controller=] (Alice in our [[#usecase]]) should be assumed to
have control-level access across her entire data space.

<figure>
<figcaption>Permission model for [=Registrar=] resources</figcaption>
  <table class="data permissions" align="left">
    <col>
    <colgroup></colgroup>
    <colgroup></colgroup>
    <colgroup span=2></colgroup>
    <colgroup span=2></colgroup>
    <thead>
      <tr>
        <th></th>
        <th scope="colgroup">Controller</th>
        <th scope="colgroup">Public</th>
        <th colspan=2 scope="colgroup">Selectively Trusted</th>
        <th colspan=2 scope="colgroup">Selectively Granted</th>
      </tr>
      <tr>
        <th scope="col">Resource</th>
        <th scope="col">Access</th>
        <th scope="col">Access</th>
        <th scope="col">Subject</th>
        <th scope="col">Access</th>
        <th scope="col">Subject</th>
        <th scope="col">Access</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>`/id`</td>
        <td>Control</td>
        <td>Read</td>
        <td>Identity Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`/registries/`</td>
        <td>Control</td>
        <td>-</td>
        <td>Trusted Agents</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /registries/application`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /registries/data`</td>
        <td>Control</td>
        <td>-</td>
        <td>Data Authorization Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`/applications/`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /applications/registration-123/`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>Registered App.</td>
        <td>Read</td>
      </tr>
      <tr>
        <td>`-- /applications/registration-123/*`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>Registered App.</td>
        <td>Write</td>
      </tr>
      <tr>
        <td>`/data`</td>
        <td>Control</td>
        <td>-</td>
        <td>Data Authorization Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /data/registration-456/`</td>
        <td>Control</td>
        <td>-</td>
        <td>Data Authorization Agent</td>
        <td>Control</td>
        <td>Grantee</td>
        <td>Varies</td>
      </tr>
      <tr>
        <td>`-- /data/registration-456/*`</td>
        <td>Control</td>
        <td>-</td>
        <td>Data Authorization Agent</td>
        <td>Control</td>
        <td>Grantee</td>
        <td>Varies</td>
      </tr>
    </tbody>
  </table>
</figure>

Application Registration {#appreg}
=====================

Application Registration gives [=Agents=] participating in the Solid
[=ecosystem=] a way to register and track the [=Applications=] they've elected
to use with their data. It also provides each [=Application=] with a place
to store metadata, preferences, access grants, caches, and other internal
data specific to the function of a given [=Application=].

An [=Application Registry=] for storing individual
[=Application Registrations=] is introduced, implemented through the [[#reg]].

## Data Model ## {#appreg-datamodel}

<figure>
  <img src="appreg-model.svg" width=100%/>
  <figcaption>Data model for application registration</figcaption>
</figure>

Application Registration extends the [[#reg-model]] with type-specific
subclasses and subproperties.

* An [=Agent=] has a [=Registrar=], which links to
    [=Application Registry Set=] instances.

* An [=Application Registry Set=] links to any number of
    [=Application Registry=] instances via the
    [eco:hasRegistry](ecosystem.ttl#hasRegistry) property.

* An [=Application Registry=] links to any number of
    [=Application Registrations=] via the
    [eco:hasRegistration](ecosystem.ttl#hasRegistration) property.

* An [=Application Registration=] extends the
    [eco:Registration](ecosystem.ttl#Registration)
    class with the
    [eco:ApplicationRegistration](ecosystem.ttl#ApplicationRegistration)
    subclass.

The [eco:ApplicationRegistration](ecosystem.ttl#ApplicationRegistration)
subclass also introduces the following properties:

* [eco:registeredApplication](ecosystem.ttl#registeredApplication) -
    [=ApplicationID=] of the [=Application=] that is being registered.

<figure>
  <figcaption>Instance data for
  an [=Application Registration=] at
  https://alice.pod.example/applications/02f9d4221d9e5c0ae/#registration
  </figcaption>
  <pre highlight="turtle" line-highlight="5" line-numbers="true">
  <#registration>
    a eco:ApplicationRegistration ;
    eco:registeredBy &lt;https://alice.pod.example/id#me&gt; ;
    eco:registeredWith &lt;https://trusted.example/ar&gt; ;
    eco:registeredApplication &lt;https://nevernote.example/id#agent&gt; ;
    eco:registeredAt "2020-04-04T20:15:47.000Z"^^xsd:dateTime .
  </pre>
</figure>

## Structure and Validation ## {#appreg-structure}

A given [=Agent=] will have one or more
[=Application Registries=] discoverable through the
[[#reg-model]], via resources that implement
[[#reg-structure|Registrar Structure and Validation]].

<figure>
  <figcaption>An [=Application Registry=] at
  https://alice.pod.example/applications/#registry</figcaption>
  <img src="registrar-applications.svg" width=100%/>
</figure>

The [=Application Registry=] instance data is stored in the RDF graph
of the `/applications` container at
`https://alice.pod.example/applications/#registry`. It links to a
collection of [=Application Registrations=] stored in
the `/applications` container.

The shape tree
[ecot:application-registry-tree](ecosystem.tree#application-registry-tree)
associated with the `/applications` container specifies this resource
structure. It assigns the
[ecos:ApplicationRegistryShape](ecosystem.shex#ApplicationRegistryShape)
to validate the [=Application Registry=] instance data in the
container resource, and says that the container includes instances of
[ecot:application-registration-tree](ecosystem.tree#application-registration-tree),
which any resources added to the `/applications` container must conform to.

Conforming to
[ecot:application-registration-tree](ecosystem.tree#application-registration-tree)
ensures that the container for the [=Application Registry=] at
`/applications#registry` only contains valid [=Application Registrations=].

Specifically:

* Any resource added to the `/applications` container must be a
    container (`tree:expectedType ldp:Container`)
* An [=Application Registration=] must be stored in the
    RDF graph of that container, to successfully pass shape validation via
    `tree:shape <ecos#ApplicationRegistrationShape>`.

<figure>
  <figcaption>An [=Application Registration=] at
  https://alice.pod.example/applications/02f9d4221d9e5c0ae/#registration
  </figcaption>
  <img src="appregistration-structure.svg" width=100%/>
</figure>

These [=Application Registrations=] are associated with container resources
so that the [=Application=] that has been registered
has dedicated space to store data that is very specific to its internal
functions. In the figure above, we can see an application-specific
configuration resource (`config.ttl`) and a summary index file (`summary.idx`).

### Naming application registration resources ### {#appreg-naming}

In this proposal, resource names for ecosystem instances are almost always
randomly generated. However, when creating an
[ecot:application-registration-tree](ecosystem.tree#application-registration-tree)
for an [=Application Registration=], the container
must be named using a SHA-256 hash encoding of the [=ApplicationID=] for the
[=Application=], which is linked through the
[eco:registeredApplication](ecosystem.ttl#registeredApplication) property.

:: <b>NeverNote ApplicationID:</b> `https://nevernote.example/id#agent`
:: <b>SHA-256 Hash:</b> `70e9249113f8aef095626980e82f13833f24a902571502ef726b4d7e69739ba3`

In our [[#usecase]], the name of the container for NeverNote's
[=Application Registration=] would be
`70e9249113f8aef095626980e82f13833f24a902571502ef726b4d7e69739ba3`.

There is a reasonable argument for whether or not a one-way hash alogorithm
like SHA-256 is appropriate, as we are primarily using it as a mechanism
for URL encoding to create uniform, opaque resource names,
and the ApplicationID for a given [=Application=]
is publicly shared. However, the use of one-way hash does add a modicum
of additional privacy at a miniscule expense.

Issue: Is it appropriate to use a one-way hash for application registration
resource names. [Github issue](https://github.com/solid/data-interoperability-panel/issues/48)

### Use of internal application space ### {#appreg-internal}

There is a legitimate argument that giving [=Applications=] their own
private data space in Solid is counterintuitive to Solid’s proposition to
decouple data and [=Applications=].

However, there are certain types of data that are very specific to
the function of a particular [=Application=], and have no value to other
[=Applications=]. This may include but not be limited to app-specific
preferences, configurations, caches, or indexes. Forcing that data into
[=shape trees=] and [=shapes=] stored in the data registry that are supposed
to be consumable and interoperable by other [=Applications=] can lead to
frankenstein-like [=shape trees=] and [=shapes=] that no one wants to use.
Giving [=Applications=] a private space where they can store internal data
is therefore a key factor in broad interoperability,
because it protects interoperable data from pollution by narrowly
focused elements.

Ultimately, if [=Applications=] don't want to be interoperable, there's
no reasonable convention that could prevent it. For example, they could
decide to use proprietary vocabularies, [=shapes=], and [=shape trees=].
However, there are motivating factors to
be interoperable, because in doing so they become compatible with a
slew of data that already exists in the [=ecosystem=], including data within
their competitive landscape. Providing a private space allows [=Applications=]
to separate some internals from true interoperable data so that the
interoperable data is cleaner and more usable. Our belief is that
this helps avoid the creation of far-reaching app-specific silos.

Because this space is private to an [=Application=] and not meant to
be interoperable, the [=Application=] may or may not decide to utilize
data validation facilities like [=shape trees=] or [=shapes=].

## Permission Model ## {#appreg-permissions}

There is no public access to any data in an [=Application Registry=].

Only [=Agents=] that have been selectively trusted to assist a
given agent with managing application registration have the ability to manage
contents and permissions across [=Application Registries=],
including the creation and modification of [=Application Registrations=].

A given registered [=Application=] has read access to its
[=Application Registration=], and read/write access to
the data space inside its container. It does not get control privileges.

<figure>
<figcaption>Permission model for [=Application Registry=] resources</figcaption>
  <table class="data permissions" align="left">
    <col>
    <colgroup></colgroup>
    <colgroup></colgroup>
    <colgroup span=2></colgroup>
    <colgroup span=2></colgroup>
    <thead>
      <tr>
        <th></th>
        <th scope="colgroup">Controller</th>
        <th scope="colgroup">Public</th>
        <th colspan=2 scope="colgroup">Selectively Trusted</th>
        <th colspan=2 scope="colgroup">Selectively Granted</th>
      </tr>
      <tr>
        <th scope="col">Resource</th>
        <th scope="col">Access</th>
        <th scope="col">Access</th>
        <th scope="col">Subject</th>
        <th scope="col">Access</th>
        <th scope="col">Subject</th>
        <th scope="col">Access</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>`/applications/`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /applications/02f9d4221d9e5c0ae/`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>Registered App.</td>
        <td>Read</td>
      </tr>
      <tr>
        <td>`-- /applications/02f9d4221d9e5c0ae/*`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>Registered App.</td>
        <td>Write</td>
      </tr>
      <tr>
        <td>`-- /applications/6fe4221d0589d7bde/`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>Registered App.</td>
        <td>Read</td>
      </tr>
      <tr>
        <td>`-- /applications/6fe4221d0589d7bde/*`</td>
        <td>Control</td>
        <td>-</td>
        <td>App. Registration Agent</td>
        <td>Control</td>
        <td>Registered App.</td>
        <td>Write</td>
      </tr>
    </tbody>
  </table>
</figure>

## Looking up an Application Registration ## {#appreg-lookup}

There are a few reasons that different actors might lookup
an [=Application Registration=]:

* The [=Agent=] that is the [=resource controller=] (e.g. Alice)
    may want to view or manage their collection of registered
    [=Applications=].
* Another [=Agent=] may act as a [=trusted agent=] to assist the
    resource controller with management and registration of
    [=Applications=].
* An [=Application=] may want to see if it has been registered,
    and access its [=Application Registration=]
    if it exists. *This is the most frequently occuring scenario.*

Per the [[#appreg-permissions]], the [=resource controller=] and
any [=trusted agents=] for application registration will have access and
visibility across [=Application Registries=] and
[=Application Registrations=]. An
[=Application=] will only have access to its own [=Application Registration=],
in which case it would be linked to that [=Application Registration=] via the
[eco:registeredApplication](ecosystem.ttl#registeredApplication) property.

Since [=Applications=] do not have access to the list of [=Applications=]
in [=Application Registries=], the only way they can check to see if they
are registered is to perform a direct lookup in the addressable space
of each [=Application Registry=] in the [=Application Registry Set=],
using the SHA-256 hash of its [=applicationID=].

<pre>
GET https://alice.pod.example/applications/70e9249113f8aef095626980e82f13833f24a902571502ef726b4d7e69739ba3
</pre>

Inability to access the [=Application Registration=] would be a result of:

* There is no [=Application Registration=] for that
    [=Application=] in the [=Application Registry=].
* There is an [=Application Registration=] at the target URL, but
    it cannot be accessed because it associated with a
    different [=Application=].

In either case, the server may return either a 403 or 404 depending on
server or user privacy preference.

If an [=Application=] can access the
[=Application Registration=], then it can confirm that it
is already a registered [=Application=] for the [=Agent=].

If an [=Application=] is not registered, and would like to be,
it will need to go through the process of [[#appreg-new]].

## Registering an Application ## {#appreg-new}

In almost every case, an [=Application=] will not be permitted
to register itself, and will need the
assistance of a [=trusted agent=] that has been authorized to assist
with application registration for a given [=Agent=].

Issue: Agents that can perform these capabilities will be discoverable
through the registrar. Until that section is written, we'll use a
hard-coded properties associated with the Agent for discovery.

The [=Application=] will look for another
[=Application=] that is linked with the [=Agent=] through the
[eco:trustsForApplicationRegistration](ecosystem.ttl#trustsForApplicationRegistration)
property.

<figure>
  <figcaption>[=Agent=] at https://alice.pod.example/id#me linking to Application
  Registration Agent</figcaption>
  <pre highlight="turtle">
    <#me>
      a eocsystem:Agent;
      eco:trustsForApplicationRegistration &lt;https://trusted.example/ar/&gt; .
  </pre>
</figure>

The [=Application=] will redirect the [=resource controller=] via the
synchronous [[#trusted|trusted agent]] pattern to the [=Application=] linked by
[eco:trustsForApplicationRegistration](ecosystem.ttl#trustsForApplicationRegistration),
supplying its its [=ApplicationID=] as a parameter.

The [=application registration agent=] is now expected to dereference
(i.e. perform an HTTP GET on) the [=ApplicationID=] to retrieve an
[=application profile document=]. The contents of that document
help the [=Agent=] determine whether that [=Application=] is suitable for
approval.

For example, verification of a verifiable credential
stored in the [=application profile document=], issued by a trusted third party,
is a good indicator of the [=Application’s=] trustworthiness.
Similarly, an [=Application=], or the [=identity provider=] it uses, may
be listed on a trusted whitelist that the [=trusted agent=]
consults. It is able to raise issues related to these checks (or others)
to the [=resource controller=] as part of her decision making process.

Assuming suitability and confirmation from the [=resource controller=], the
[=application registration agent=] will proceed to create the
[=Application Registration=] for
the [=Application=] in the appropriate [=Application Registry=].
When it is finished, it will return her to
the [=Application=] at the
[eco:applicationRegistrationCallback](ecosystem.ttl#applicationRegistrationCallback)
provided in the application profile document.

### Creating the application registration entry ### {#appreg-creating}

The [=application registration agent=] is responsible for creating
the [=Application Registration=] in conformance with the
documented [[#appreg-structure]] pattern.

Specifically, the
[ecot:application-registration-tree](ecosystem.tree#application-registration-tree)
stipulates that the [=Application Registration=] be a container via
`tree:expectedType ldp:Container`.

The [=Application Registration=] must be added to the RDF
graph of that container with a `<#registration>` subject, and pass validation
against the
[ecos:ApplicationRegistrationShape](ecosystem.shex#ApplicationRegistrationShape).

The [=Application Registration's=] properties must be set as follows:

* [eco:registeredBy](ecosystem.ttl#registeredBy): linked to the [=identity=]
    of the [=authenticated agent=] that invoked the registration
    (i.e. the [=webid=] of the [=resource controller=])
* [eco:registeredWith](ecosystem.ttl#registeredWith): linked to the
    [=ApplicationID=] of the [=trusted agent=] that facilitated the
    registration, typically the [=application registration agent=].
* [eco:registeredApplication](ecosystem.ttl#registeredApplication): linked to
    the [=ApplicationID=] of the [=Application=] that is being registered.
* [eco:registeredAt](ecosystem.ttl#registeredAt): the `xsd:dateTime` of
    the registration.

<figure>
  <figcaption>Example [=Application Registration=]</figcaption>
  <pre highlight="turtle">
  <#registration>
    a eco:applicationRegistration ;
    eco:registeredBy &lt;https://alice.pod.example/id#me&gt; ;
    eco:registeredWith &lt;https://trusted.example/ar&gt; ;
    eco:registeredApplication &lt;https://nevernote.example/id#agent&gt; ;
    eco:registeredAt "2020-04-04T20:15:47.000Z"^^xsd:dateTime .
  </pre>
</figure>

The [=Application Registration=] container must be named in
accordance with the instructions in [[#appreg-naming]].

The [=Application Registration=] container must be added as a child
member of the [=Application Registry=] container.

Access to the [=Application Registration=] must be set per the
instructions in [[#appreg-permissions]].

The [=Application Registration=] must be associated with the
[=Application Registry=] through the
[eco:hasRegistry](ecosystem.ttl#hasRegistry) property in
the graph of the [=Application Registry=].

Data Registration {#datareg}
=====================

Data Registration gives [=Agents=] participating in the Solid [=ecosystem=]
a way to register, organize, and subsequently manage the data they control.

A [=Data Registry=] for storing individual [=Data Registrations=] is
introduced, implemented through the [[#reg]].

A [=Data Registry=] provides a specific location in a Solid [=pod=] where
data of various types is organized and stored in a uniform way to aid
authorization, interoperability, discovery, and more. It avoids complex
hierarchies of data that hinder flexibility and interoperability by
employing a relatively flat hierarchy. This creates natural data boundaries
that make data authorization, amongst other things, extremely intuitive.

A [=Data Registry=] can be used for basic discovery, but it is not
designed nor intended to be an efficient means to query or index data.
However, it is intended to be used as reliable source data for different
query engines or indexing schemes.

## Data Model ## {#datareg-model}

<figure>
  <img src="datareg-model.svg" width=100%/>
  <figcaption>Data model for data registration</figcaption>
</figure>

Data Registration extends the [[#reg-model]] with type-specific subclasses
and subproperties.

An [=Agent=] has a [=Registrar=] that links to [=Data Registry Sets=]
via the [eco:hasDataRegistrySet](ecosystem.ttl#hasDataRegistrySet) property.

A [=Data Registry Set=] links to any number of [=Data Registries=] via
the [eco:hasRegistry](ecosystem.ttl#hasRegistry) property.

A [=Data Registry=] links to any number of [=Data Registrations=]
via the [eco:hasRegistration](ecosystem.ttl#hasRegistration) property.

A [=Data Registration=] extends the
[eco:Registration](ecosystem.ttl#Registration) class with the
[eco:DataRegistration](ecosystem.ttl#DataRegistration) subclass.

A [=Data Registration=] includes any number of [=Registered Data Instances=]
via the
[eco:hasRegisteredDataInstance](ecosystem.ttl#hasRegisteredDataInstance)
property.

The [eco:DataRegistration](ecosystem.ttl#DataRegistration) subclass
introduces the following properties:

* [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree) - URI of the
    [=shape tree=] that is being registered.
* [eco:hasRegisteredDataInstance](ecosystem.ttl#hasRegisteredDataInstance) -
    Any number of [=Registered Data Instances=] that conform to the
    [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree).

<figure>
  <figcaption>Instance data for a [=Data Registration=] at https://alice.pod.example/data/foo/#registration
  </figcaption>
  <pre highlight="turtle" line-highlight="5" line-numbers="true">
  <#registration>
    a eco:DataRegistration ;
    eco:registeredBy &lt;https://alice.pod.example/id#me&gt; ;
    eco:registeredWith &lt;https://app.example/id#agent&gt; ;
    eco:registeredAt "2020-04-04T20:15:47.000Z"^^xsd:dateTime .
    eco:registeredShapeTree &lt;https://tree.example/commonnote#notebook-tree&gt; ;
    eco:hasRegisteredDataInstance &lt;https://alice.pod.example/data/notebook-tree/49a4057a-6ade-4a9d-9869-085a00925259/#notebook&gt; ,
                                  &lt;https://alice.pod.example/data/notebook-tree/3f56c32e-96c6-4b0c-b941-eadc2bf98b18/#notebook&gt; ,
                                  &lt;https://alice.pod.example/data/notebook-tree/16e1eae9-20a5-489d-8380-8c07ca3805c4/#notebook&gt; ,
                                  &lt;https://alice.pod.example/data/notebook-tree/886785d2-6c23-46ee-9e19-5ac36b7bcd71/#notebook&gt; ,
                                  &lt;https://alice.pod.example/data/notebook-tree/dae5015c-d5f9-4ede-b9eb-7ca7a19854a9/#notebook&gt; .
    </pre>
</figure>

Issue: Should we be using RDF Collections for things like eco:hasRegisteredDataInstance?

## Structure and Validation ## {#datareg-structure}

A given [=Agent=] will have one or more [=Data Registries=] discoverable
through the [[#reg-model]], via resources that implement the
Registrar [[#reg-structure]].

Following this path of discovery ultimately
leads to [=Data Registries=], containing [=Data Registrations=], which
in turn will contain [=Registered Data Instances=].

<figure>
  <figcaption>A [=Data Registry=] at
  https://alice.pod.example/data/#registry</figcaption>
  <img src="datareg-structure.svg" width=100%/>
</figure>

The [=Data Registry=] instance data is stored in the RDF graph
of the `/data` container at
`https://alice.pod.example/data/#registry`.

It links to a
collection of [=Data Registrations=] stored in
the `/data` container. Each individual [=Data Registration=] represents
a different [=shape tree=]. The [=shape tree=] associated with a given
[=Data Registration=] is identified by the object of the
[eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree) property.

The [ecot:data-registry-tree](ecosystem.tree#data-registry-tree)
associated with the [=Data Registry=] at `/data/#registry` defines
the resource structure for that [=Data Registry=], and the data validation
rules across those resources.

* It assigns the
    [ecos:DataRegistryShape](ecosystem.shex#DataRegistryShape)
    to validate the [=Data Registry=] instance data in the
    container resource
* It says that the container must include instances of
    [ecot:data-registration-tree](ecosystem.tree#data-registration-tree),
    which any resources added to the `/data` container must conform to.

Conforming to
[ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
ensures that the [=Data Registry=] container at
`/data` only contains valid [=Data Registrations=].

* Any resource added to the `/data` container must be a
    container via `tree:expectedType ldp:Container`.
* It assigns the
    [ecos:DataRegistrationShape](ecosystem.shex#DataRegistrationShape)
    to ensure there is a valid [=Data Registration=] instance in the
    container resource graph.

The most important element of [=Data Registry=] is the data that is actually
stored inside of it, which take the form of [=Registered Data Instances=].

A given [=Data Registration=] will contain any number of
[=Registered Data Instances=], which must conform to the [=shape tree=]
specified in the [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree)
property of that [=Data Registration=].

This leads us to a case where we have intersecting [=shape trees=] on the same
resource (the [=Data Registration=]).

<figure>
  <figcaption>A [=Data Registration=] at
  https://alice.pod.example/data/49a4057a...5259/#registration
  </figcaption>
  <img src="dataregistration-structure.svg" width=100%/>
</figure>

In the figure above, we can observe the intersection of the
[ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
and the [note:note-container-tree](note.tree#note-container-tree) on the
[=Data Registration=] at
`/data/49a4057a...5259/#registration`.

* A [=Data Registration=] can't know which specific
    [=shape tree=] will be registered in advance, so the
    [ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
    connect specify the expected contents of the container with `tree:contents`.
* It is crucial that the contents of the [=Data Registration=] container
    be conformant instances of the [=shape tree=] specified in the
    [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree)
    property of the [=Data Registration=].
* Consequently, a second [=shape tree=] is associated with the
    [=Data Registration=] to ensure that what is stored in the container
    are conformant instances of the
    [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree).
* In the figure above,
    [note:note-container-tree](note.tree#note-container-tree) is also added
    to the [=Data Registration=] at `/data/49a4057a...5259/#registration`.
    It adds the additional stipulation that the contents of the
    [=Data Registration=] must conform to the
    [note:note-tree](note.tree#note-tree).

### Naming Registrations and Registered Data Instances ### {#datareg-naming}

The name of the [=Data Registration=] container resource must be a
generated \[UUID](https://www.ietf.org/rfc/rfc4122.txt).

The name of a [=Registered Data Instance=] resource linked to a
[=Data Registration=] through
[eco:hasRegisteredDataInstance](ecosystem.ttl#hasRegisteredDataInstance)
must be a generated \[UUID](https://www.ietf.org/rfc/rfc4122.txt).

## Permission Model ## {#datareg-permissions}

TBD

## Registering Data ## {#datareg-registrations}

TBD

### Instances of Registered Data ### {#datareg-instances}

TBD


Trusted Agents {#trusted}
=====================

A [=trusted Agent=] is an application that a [=resource controller=] trusts
to perform actions for them with elevated privilege. They can be
trusted to help a resource controller to make smart decisions related to
their data.

There's no limit to what a trusted agent can
assist with, but [[#appreg|registering applications]] and authorizing access to
data are two critical operations covered in this proposal.

A trusted [=application registration agent=] helps the [=resource controller=]
make smart decisions about the applications they choose to utilize, and
ensure they get provisioned appropriately.

A trusted agent for data authorization is needed in cases where the resource
controller wishes to grant limited access to data in her Pod to another
[=authenticated agent=] or [=user-piloted application=], but needs
assistance to determine what access is needed, and help to provision
that access.

There are three typical patterns to interact with a trusted agent;
*Embedded*, *Synchronous*, and *Asynchronous*.

The **Embedded pattern** is employed when the application in question has full
control privileges, and the trusted agent capabilities can
be executed directly. An example of an application that could fall into
this category would be a Pod management application installed by default
by the user’s Pod provider.

The **Synchronous pattern** utilizes a web-based redirect flow much like an
OAuth2 grant flow. The user is redirected to the trusted agent URL, with
a callback parameter provided as part of the request. When the
trusted agent is finished, it sends the user back to the provided
callback URL. This is an excellent pattern for application registration
and data authorization.

The **Asynchronous pattern** utilizes an event based model, where a message is
sent to the Trusted Agent through some mechanism (direct, pubsub, etc).
This flow is most typical for server-side/bot applications or any piloted
clients that can make use of asynchronous notification processing.

A given trusted agent may employ one or more of these patterns.

Client Identification {#client}
=====================

Throughout this proposal, we see cases where Alice compartmentalizes access
to her data based on who or what is access it - the [=authenticated agent=].
In certain cases, we also limit access based on the application in use
by Alice - the
[=user-piloted application=].

We utilize a new optional predicate in an [=acl resource=] statement to
restrict access to permitted [=user-piloted applications=], identified by their
[=ApplicationIDs=].

Limiting access to data based on
the [=user-piloted application=] in use is only reliable in certain
instances when the [=application=] can be identified with confidence.

## Identifying client applications ## {#client-id}

For identification purposes, client [=applications=] in use across the world
today fall into two buckets; *strongly identifiable* and *weakly identifiable*.

**Strongly identifiable clients** can be identified by 3rd parties independently
from their user/controller. Only [=server-side applications=] are
strongly identifiable. As confidential clients, they can keep secrets
and can present attestations and third-party credentials
via DNS / domain certificates.

**Weakly identifiable clients** include in-browser JS apps and native desktop
or mobile applications. They are considered weakly identifiable because they
are not able to keep secrets on an instance level. They are often referred to
as public clients. Native apps should be strongly-identifiable in theory
(since they are able to keep secrets on an instance level), but not in
practice because the OS manufacturers do not make their trust
infrastructure available. **Weakly identifiable clients are only strongly
identifiable to the user controlling them**.

## Limiting access by client application ## {#client-limit}

In the case of a strongly identifiable [=server-side application=],
the [=authenticated agent=] and the client application are the same. The client
application has its own [=identity=] that can be strongly authenticated. Alice
chooses which data that client application's identity can access, in the same
way that she chooses which data Bob can access.

In the case of [=user-piloted applications=], the ability for a Solid pod to
limit access to data by the client application in use is only as strong as
the trustworthiness of the user piloting that application, and their ability
to avoid using malicious applications. The [=ApplicationID=] can be manipulated
by the user in control of the app. This means that Alice can strongly control
the applications that she uses to compartmentalize her own data, but has
limited ability to control the applications that Bob uses to access the data
she shares with him.

Definitions {#definitions}
=====================

<b>All definitions as stated below should be considered in the context of
an interoperable [=ecosystem=] for [=Solid=], whether explicitly stated
or not.</b>

<dfn>Solid</dfn> is a protocol made up of a number of open web standards
aimed at decentralizing data on the web.

A Solid <dfn>pod</dfn> is a place for storing and accessing data via
the [=Solid=] protocol, with mechanisms for controlling who or what can
access that data.

An interoperable <dfn>ecosystem</dfn> is
a collection of [=Solid=] compatible [=applications=] developed by one or more
entities, used by a community of users, that can safely access and manipulate
the same kinds of data in [=pods=].

An <dfn>Agent</dfn> is a distinct individual, group, organization, or piece
of software with an identity that can be strongly authenticated. Represented
by the [eco:Agent](ecosystem.ttl#Agent) class. Validated by the
[ecos:AgentShape](ecosystem.shex#AgentShape). Associated with resources by the
[ecot:agent-tree](ecosystem.tree#agent-tree).

An <dfn>Application</dfn> is a piece of software that interfaces with a
Solid pod, either as a [=server-side application=], or as a
[=user-piloted application=]. Represented by the
[eco:Application](ecosystem.ttl#Application) class. Validated by the
[ecos:ApplicationShape](ecosystem.shex#ApplicationShape).

A <dfn>server-side application</dfn> runs on a dedicated server. They may
also act as autonomous [=authenticated agents=].

A <dfn>user-piloted application</dfn> runs on a user's device, with the user
as the [=authenticated agent=]. They include in-browser javascript
applications, native desktop applications, and mobile applications.

An <dfn>identity</dfn> in Solid is a unique URI that can be dereferenced to
return an [=identity profile document=]. Compatible identity systems
include [=WebID=] and [=DID=].

An <dfn>identity profile document</dfn> is a linked data document obtained
by dereferencing the URI for a given [=identity=]. It provides information
that can be used to prove that a given [=agent=] controls the document.

An <dfn>authenticated agent</dfn> is an [=agent=] that has strongly
authenticated their [=identity=] by proving control of the
[=identity profile document=] via an authentication protocol such as
[[WEBID-OIDC]].

A <dfn>WebID</dfn> is a web resource at an HTTP URI which refers to an
[=agent=]. An [=identity profile document=] can be accessed by
dereferencing the WebID. [[WEBID]]

A <dfn>DID</dfn> is a URI that associates a DID subject (e.g. an [=agent=],
thing, data model, abstract entity, etc.) with a DID document,
equivalent to an [=identity profile document=], to allow trustable
interactions with that subject. [[DID]]

An <dfn>identity provider</dfn> furnishes an [=agent=] with authenticated
credentials that prove agent is who it says it is, across the web.

A <dfn>token</dfn> is used to make authenticated requests to the [=Solid=]
server for a given [=authenticated agent=].

An <dfn>ApplicationID</dfn> is a web resource at an HTTP URI uniquely associated
with a given [=application=]. For [=server-side applications=], it may also
serve as an [=identity=]. An [=application profile document=] can be
accessed by dereferencing the ApplicationID.

An <dfn>application profile document</dfn> is a linked data document
obtained by dereferencing the URI for a given [=ApplicationID=]. It contains
useful information about an application that can be employed in
various workflows including application registration and data authorization.

A <dfn>resource controller</dfn> is an [=authenticated agent=] with full
privileges and control over a given resource or set of resources.

An <dfn>acl resource</dfn> as defined by [[WAC]] may be directly
associated with a resource or indirectly associated with a resource
through inheritance. It determines which [=agents=] can access a
resource, and the modes of access they have for it.

A <dfn>trusted agent</dfn> is any [=application=] that a
[=resource controller=] trusts to perform actions for them. These
actions typically require some leve

An <dfn>application registration agent</dfn> is a type of [=trusted agent=]
that a [=resource controller=] uses to register and manage applications that
interface with their [=pod=].

A <dfn>shape</dfn> provides a schema that RDF data graphs must meet in order
to be considered conformant. A shape associated with a given resource in a
[=pod=] ensures that any data stored in that resource must conform to the
associated shape. Shape languages include [[SHEX]] and [[SHACL]].

A <dfn>shape tree</dfn> defines a prospective tree of related resources
which can be read and written by applications. The shape tree associates
each of these resources with a shape. This allows one to treat a set of
related resources as a single grouping, and apply that to a range of
operations including access control, data organization, data validation,
and data migration. [[SHAPETREES]]

A <dfn>Registrar</dfn> for a given [=Agent=] provides [=Registries=],
organized in [=Registry Sets=]. Represented by the
[eco:Registrar](ecosystem.ttl#Registrar) class. Validated by the
[ecos:RegistrarShape](ecosystem.shex#RegistrarShape). Associated with
resources by the
[ecot:registrar-shape-tree](ecosystem.tree#registrar-shape-tree).

A <dfn>Registry Set</dfn> is a collection of one or more registries of a
specific type, including [=Application Registries=], Data Registries,
Access Registries, and Remote Registries. Represented by the
[eco:RegistrySet](ecosystem.ttl#RegistrySet) class.

A <dfn>Registry</dfn> is a collection of [=Registrations=] stored in a
specific location in a [=pod=]. It provides a place where an [=Agent=]
can register, store, and lookup essential data needed to participate in
the [=ecosystem=]. Represented by the
[eco:Registry](ecosystem.ttl#Registry) class.

A <dfn>Registration</dfn> is the basic data unit of any [=Registry=].

An <dfn>Application Registry Set</dfn> is a [=Registry Set=] specifically
made up of [=Application Registries=]. Represented by the
[eco:ApplicationRegistrySet](ecosystem.ttl#ApplicationRegistySet) class.
Validated by the
[ecos:ApplicationRegistrySetShape](ecosystem.shex#RegistrySetShape).
Associated with resources by the
[ecot:application-registry-set-tree](ecosystem.tree#application-registry-set-tree).

An <dfn>Application Registry</dfn> is a collection of
[=Application Registrations=] stored in a specific location in a [=pod=].
Represented by the
[eco:ApplicationRegistry](ecosystem.ttl#ApplicationRegistry) class.
Validated by the
[ecos:ApplicationRegistryShape](ecosystem.shex#ApplicationRegistryShape).
Associated with resources by the
[ecot:application-registry-tree](ecosystem.tree#application-registry-tree).

An <dfn>Application Registration</dfn> provides the [=Agent=]
with a place to maintain metadata, state, preferences, and
other application-specific data associated with a given [=Application=] they
have elected to use. Represented by the
[eco:ApplicationRegistration](ecosystem.ttl#ApplicationRegistration) class.
Validated by the
[ecos:ApplicationRegistrationShape](ecosystem.shex#ApplicationRegistrationShape).
Associated with resources by the
[ecot:application-registration-tree](ecosystem.tree#application-registration-tree).

A <dfn>Data Registry Set</dfn> is a [=Registry Set=] specifically made up of
[=Data Registries=]. Represented by the
[eco:DataRegistrySet](ecosystem.ttl#DataRegistrySet) class.
Validated by the
[ecos:DataRegistrySetShape](ecosystem.shex#DataRegistrySetShape).
Associated with resources by the
[ecot:data-registry-set-tree](ecosystem.tree#data-registry-set-tree).

A <dfn>Data Registry</dfn> is a collection of [=Data Registrations=], each
representing a unique type of data, stored in a specific location in a
Solid [=pod=]. Represented by the
[eco:DataRegistry](ecosystem.ttl#DataRegistry) class.
Validated by the
[ecos:DataRegistryShape](ecosystem.shex#DataRegistryShape).
Associated with resources through the
[ecot:data-registry-tree](ecosystem.tree#data-registry-tree).

A <dfn>Data Registration</dfn> provides the [=Agent=] with a place to store
[=Registered Data Instances=] of a particular type, conforming to a
given [=shape tree=]. Represented by the
[eco:DataRegistration](ecosystem.ttl#DataRegistration) class.
Validated by the
[ecos:DataRegistrationShape](ecosystem.shex#DataRegistrationShape).
Associated with resources through the
[ecot:data-registration-tree](ecosystem.tree#data-registration-tree).

A <dfn>Registered Data Instance</dfn> is a unique, stored instance of a
particular type of data conforming to a given [=shape tree=]. Each registered
data instance is contained within a given [=Data Registration=].


Use Case Environment {#environment}
=====================

Issue: Add the contents of the ecosystem vocabulary

## People ## {#people}

### Alice ### {#alice}

<table>
  <tbody>
    <tr>
      <td><th>Alice's Pod URL</th></td>
      <td>https://alice.pod.example</td>
    </tr>
    <tr>
      <td><th>Alice's WebID</th></td>
      <td>https://alice.pod.example/id#me</td>
    </tr>
  </tbody>
</table>

#### Alice's Profile Document #### {#alice-profile}

Issue: Need to provide more detail around *how* applications, data, access,
remote registry items get organized into different registries with a set along
with use cases.

<figure>
  <figcaption>Alice’s identity profile document at
  https://alice.pod.example/id</figcaption>
  <pre highlight="turtle">
  @prefix solid: &lt;http://www.w3.org/ns/solid/terms#&gt; .
  @prefix eco: &lt;http://www.w3.org/ns/solid/ecosystem#&gt; .

  <#me>
      a eco:Agent;
      eco:hasRegistrar &lt;https://alice.pod.example/registries/#registrar&gt; ;
      # Trusted Agents
      eco:trustsForApplicationRegistration &lt;https://trusted.example/ar/&gt; ;
      # Notification Endpoints
      eco:hasAccessInbox &lt;https://alice.pod.example/access/inbox&gt; .
      # Identity Provider
      solid:oidcIssuer &lt;https://idp.example&gt; ;
  </pre>
</figure>

#### Alice's Registrar #### {#alice-registrar}

<figure>
  <figcaption>Alice’s registrar instance at
  https://alice.pod.example/registries/application#set</figcaption>
  <pre highlight="turtle">
  <#registrar>
    a eco:Registrar;
    eco:hasApplicationRegistrySet &lt;https://alice.pod.example/registries/application#set&gt; ;
    eco:hasDataRegistrySet &lt;https://alice.pod.example/registries/data#set&gt; .
  </pre>
</figure>

#### Alice's Application Registry Set #### {#alice-appregset}

<figure>
  <figcaption>Alice’s application registry set instance at
  https://alice.pod.example/registries/application#set</figcaption>
  <pre highlight="turtle">
  <#set>
    a eco:ApplicationRegistrySet;
    eco:hasApplicationRegistry &lt;https://alice.pod.example/applications/#registry&gt; ,
                               &lt;https://alice.otherpod.example/applications/#registry&gt; .
  </pre>
</figure>

#### Alice's Application Registry #### {#alice-appregistry}

<figure>
  <figcaption>Alice's application registry instance at
  https://alice.pod.example/applications/#registry</figcaption>
  <pre highlight="turtle">
  <#registry>
    a eco:ApplicationRegistry ;
    eco:hasRegistration &lt;https://alice.pod.example/applications/70e9249113f8aef095626980e82f13833f24a902571502ef726b4d7e69739ba3/#registration&gt; .
  </pre>
</figure>

Note that `https://alice.pod.example/applications/` is a container,
and #registry is stored in the RDF graph of the container resource.

#### Alice's Application Registration for Nevernote #### {#alice-appregnevernote}

<figure>
  <figcaption>Alice’s application registration instance for NeverNote at
  https://alice.pod.example/applications/70e9249113f8aef095626980e82f13833f24a902571502ef726b4d7e69739ba3/#registration</figcaption>
  <pre highlight="turtle">
  <#registration>
    a eco:ApplicationRegistration ;
    eco:registeredBy &lt;https://alice.pod.example/id#me&gt; ;
    eco:registeredWith &lt;https://trusted.example/ar&gt; ;
    eco:registeredApplication &lt;https://nevernote.example/id#agent&gt; ;
    eco:registeredAt "2020-04-04T20:15:47.000Z"^^xsd:dateTime .
  </pre>
</figure>

Note that
`https://alice.pod.example/applications/70e9249113f8aef095626980e82f13833f24a902571502ef726b4d7e69739ba3/`
is a container, and #registration is stored in the RDF graph of the
container resource.

## Applications ## {#applications}

### NeverNote ### {#nevernote}

<table>
  <tbody>
    <tr>
      <td><th>Application URL</th></td>
      <td>https://nevernote.example</td>
    </tr>
    <tr>
      <td><th>Application ID (AppID)</th></td>
      <td>https://nevernote.example/id#agent</td>
    </tr>
    <tr>
      <td><th>SHA-256 Hash of AppID</th></td>
      <td>70e9249113f8aef095626980e82f13833f24a902571502ef726b4d7e69739ba3</td>
    </tr>
  </tbody>
</table>

#### NeverNote's Profile Document #### {#nevernote-profile}

<figure>
  <figcaption>Contents of NeverNote’s Profile Document at
  https://nevernote.example/id#agent</figcaption>
  <pre highlight="turtle">
  @prefix solid: &lt;http://www.w3.org/ns/solid/terms#&gt; .
  @prefix eco: &lt;http://www.w3.org/ns/solid/ecosystem#&gt; .
  @prefix acl: &lt;http://www.w3.org/ns/auth/acl&gt; .

  <#agent>
      # this is an application, not a person
      a eco:Application;
      # redirect to this URL after going through authorization agent workflow
      eco:authorizationCallback &lt;https://nevernote.example/data-authorization&gt; ;
      # redirect to this URL after going through application registration
      # agent workflow
      eco:applicationRegistrationCallback &lt;https://nevernote.example/app-registration&gt; ;

  # Declaration of the type of access this application needs
  # UUID randomly generated for subject value
  <#33116309-1667-4a7b-a91f-4dbf177e3f95>
      a eco:accessNeed;
      # Access needs related to notebook shape trees
      eco:shapetree &lt;https://shapetrees.example/commonnote#notebook&gt;
      # Request permission create new notebook shape trees
      eco:shapetreeCreate true;
      # Request permission to read and write created notebook shape trees
      eco:shapetreeCreateAccess [ acl:Read, acl:Write ];
      # Request access to any existing notebook shape trees
      eco:shapetreeExistingAccess true;
      # Request permission to read and write existing notebook shape trees
      eco:shapetreeExistingAccess [ acl:Read, acl:Write ].

  <#75054942-b8b4-4e3a-84e4-7b564ca1ae7a>
      a eco:accessNeed;
      eco:shapetree &lt;https://shapetrees.example/commonnote#note&gt;;
      eco:shapetreeCreate true;
      eco:shapetreeCreateAccess [ acl:Read, acl:Write ] ;
      eco:shapetreeExistingAccess true;
      eco:shapetreeExistingAccess [ acl:Read, acl:Write ].
  </pre>
</figure>

<pre class="biblio">
{
  "problems-and-goals": {
    "href": "https://github.com/solid/data-interoperability-panel/blob/master/problems-and-goals.md",
    "title": "Problems and Goals for Interoperability, Collaboration, and Security in a Solid Pod",
    "authors": [
      "Justin Bingham",
      "Eric Prud'hommeaux",
      "Jamie Fiedler",
      "Josh Collins"
    ]
  },
  "shapetrees": {
    "href": "https://shapetrees.github.io/specification/primer",
    "title": "Shape Trees",
    "authors": [
      "Justin Bingham",
      "Eric Prud'hommeaux",
      "Jamie Fiedler",
      "Josh Collins"
    ]
  },
  "wac": {
    "href": "https://solid.github.io/specification/wac/",
    "title": "Web Access Control"
  },
  "webid": {
    "href": "https://www.w3.org/2005/Incubator/webid/spec/identity/",
    "title": "WebID 1.0",
    "authors": [
      "Tim Berners-Lee",
      "Henry Story",
      "Andrei Sambra"
    ]
  },
  "did": {
    "href": "https://www.w3.org/TR/did-core/",
    "title": "Decentralized Identifiers (DIDs) v1.0",
    "authors": [
      "Drummond Reed",
      "Manu Sporney",
      "Dave Longley",
      "Christopher Allen",
      "Ryan Grant",
      "Markus Sabadello"
    ]
  },
  "shex": {
    "href": "http://shex.io/shex-semantics/index.html",
    "title": "Shape Expressions Language 2.1",
    "authors": [
      "Eric Prud'hommeaux",
      "Iovka Boneva",
      "Jose Emilio Labra Gayo",
      "Gregg Kellogg"
    ]
  },
  "shacl": {
    "href": "https://www.w3.org/TR/shacl/",
    "title": "Shapes Constraint Language (SHACL)",
    "authors": [
      "Holger Knublauch",
      "Dimitris Kontokostas"
    ]
  },
  "webid-oidc": {
    "href": "https://github.com/solid/webid-oidc-spec",
    "title": "WebID-OIDC Authentication Specification",
    "authors": [
      "Dmitri Zagidulin"
    ]
  }
}
</pre>
