Definitions {#definitions}
=====================

<b>All definitions as stated below should be considered in the context of
an interoperable [=ecosystem=] for [=Solid=], whether explicitly stated
or not.</b>

<dfn>Solid</dfn> is a protocol made up of a number of open web standards
aimed at decentralizing data on the web.

A Solid <dfn>pod</dfn> is a place for storing and accessing data via
the [=Solid=] protocol, with mechanisms for controlling who or what can
access that data.

An interoperable <dfn>ecosystem</dfn> is
a collection of [=Solid=] compatible [=applications=] developed by one or more
entities, used by a community of users, that can safely access and manipulate
the same kinds of data in [=pods=].

An <dfn>Agent</dfn> is a distinct individual, group, organization, or piece
of software with an identity that can be strongly authenticated. Represented
by the [eco:Agent](ecosystem.ttl#Agent) class. Validated by the
[ecos:AgentShape](ecosystem.shex#AgentShape). Associated with resources by the
[ecot:agent-tree](ecosystem.tree#agent-tree). A given [=Agent=] is considered
the [=resource controller=] for any [=registrations=] in their [=registries=].

An <dfn>Application</dfn> is a piece of software that interfaces with a
Solid pod, either as a [=server-side application=], or as a
[=user-piloted application=]. Represented by the
[eco:Application](ecosystem.ttl#Application) class. Validated by the
[ecos:ApplicationShape](ecosystem.shex#ApplicationShape).

A <dfn>server-side application</dfn> runs on a dedicated server. They may
also act as autonomous [=authenticated agents=].

A <dfn>user-piloted application</dfn> runs on a user's device, with the user
as the [=authenticated agent=]. They include in-browser javascript
applications, native desktop applications, and mobile applications.

An <dfn>identity</dfn> in Solid is a unique URI that can be dereferenced to
return an [=identity profile document=]. Compatible identity systems
include [=WebID=] and [=DID=].

An <dfn>identity profile document</dfn> is a linked data document obtained
by dereferencing the URI for a given [=identity=]. It provides information
that can be used to prove that a given [=agent=] controls the document.

An <dfn>authenticated agent</dfn> is an [=agent=] that has strongly
authenticated their [=identity=] by proving control of the
[=identity profile document=] via an authentication protocol such as
[[WEBID-OIDC]].

A <dfn>WebID</dfn> is a web resource at an HTTP URI which refers to an
[=agent=]. An [=identity profile document=] can be accessed by
dereferencing the WebID. [[WEBID]]

A <dfn>DID</dfn> is a URI that associates a DID subject (e.g. an [=agent=],
thing, data model, abstract entity, etc.) with a DID document,
equivalent to an [=identity profile document=], to allow trustable
interactions with that subject. [[DID]]

An <dfn>identity provider</dfn> furnishes an [=agent=] with authenticated
credentials that prove agent is who it says it is, across the web.

A <dfn>token</dfn> is used to make authenticated requests to the [=Solid=]
server for a given [=authenticated agent=].

An <dfn>ApplicationID</dfn> is a web resource at an HTTP URI uniquely associated
with a given [=application=]. For [=server-side applications=], it may also
serve as an [=identity=]. An [=application profile document=] can be
accessed by dereferencing the ApplicationID.

An <dfn>application profile document</dfn> is a linked data document
obtained by dereferencing the URI for a given [=ApplicationID=]. It contains
useful information about an application that can be employed in
various workflows including application registration and data authorization.

A <dfn>resource controller</dfn> is an [=authenticated agent=] with full
privileges and control over a given resource or set of resources.

An <dfn>acl resource</dfn> as defined by [[WAC]] may be directly
associated with a resource or indirectly associated with a resource
through inheritance. It determines which [=authorization subjects=] can
access a resource, and the modes of access they have for it.

An <dfn>access mode</dfn> denotes operations (e.g. read, write)
that a given [=authorization subject=] can perform on a resource.

An <dfn>authorization subject</dfn> is the target of a given authorization
statement in an [=acl resource=]. It is either an [=Agent=] (individual,
group, [=server-side application=]), a
[=User-Piloted Application=] in use by *any* [=Agent=], or a combination of
a specific [=Agent=] using a specific [=User-Piloted Application=].

An <dfn>authorization statement</dfn> is ...

A <dfn>trusted agent</dfn> is any [=application=] that a
[=Agent=] trusts to perform actions for them. These
actions typically require some leve

An <dfn>application registration agent</dfn> is a type of [=trusted agent=]
that an [=Agent=] uses to register and manage applications that
interface with their [=pod=].

A <dfn>data authorization agent</dfn> is a type of [=trusted agent=]
that assists a [=Agent=] with the managing the data
in their [=Data Registries=], and authorizing access to it from other
[=authorization subjects=].

A <dfn>shape</dfn> provides a schema that RDF data graphs must meet in order
to be considered conformant. A shape associated with a given resource in a
[=pod=] ensures that any data stored in that resource must conform to the
associated shape. Shape languages include [[SHEX]] and [[SHACL]].

A <dfn>shape tree</dfn> defines a prospective tree of related resources
which can be read and written by applications. The shape tree associates
each of these resources with a shape. This allows one to treat a set of
related resources as a single grouping, and apply that to a range of
operations including access control, data organization, data validation,
and data migration. [[SHAPETREES]]

A <dfn>Registrar</dfn> for a given [=Agent=] provides [=Registries=],
organized in [=Registry Sets=]. Represented by the
[eco:Registrar](ecosystem.ttl#Registrar) class. Validated by the
[ecos:RegistrarShape](ecosystem.shex#RegistrarShape). Associated with
resources by the
[ecot:registrar-shape-tree](ecosystem.tree#registrar-shape-tree).

A <dfn>Registry Set</dfn> is a collection of one or more registries of a
specific type, including [=Application Registries=], Data Registries,
Access Registries, and Remote Registries. Represented by the
[eco:RegistrySet](ecosystem.ttl#RegistrySet) class.

A <dfn>Registry</dfn> is a collection of [=Registrations=] stored in a
specific location in a [=pod=]. It provides a place where an [=Agent=]
can register, store, and lookup essential data needed to participate in
the [=ecosystem=]. Represented by the
[eco:Registry](ecosystem.ttl#Registry) class.

A <dfn>Registration</dfn> is the basic data unit of any [=Registry=].

An <dfn>Application Registry Set</dfn> is a [=Registry Set=] specifically
made up of [=Application Registries=]. Represented by the
[eco:ApplicationRegistrySet](ecosystem.ttl#ApplicationRegistySet) class.
Validated by the
[ecos:ApplicationRegistrySetShape](ecosystem.shex#RegistrySetShape).
Associated with resources by the
[ecot:application-registry-set-tree](ecosystem.tree#application-registry-set-tree).

An <dfn>Application Registry</dfn> is a collection of
[=Application Registrations=] stored in a specific location in a [=pod=].
Represented by the
[eco:ApplicationRegistry](ecosystem.ttl#ApplicationRegistry) class.
Validated by the
[ecos:ApplicationRegistryShape](ecosystem.shex#ApplicationRegistryShape).
Associated with resources by the
[ecot:application-registry-tree](ecosystem.tree#application-registry-tree).

An <dfn>Application Registration</dfn> provides the [=Agent=]
with a place to maintain metadata, state, preferences, and
other application-specific data associated with a given [=Application=] they
have elected to use. Represented by the
[eco:ApplicationRegistration](ecosystem.ttl#ApplicationRegistration) class.
Validated by the
[ecos:ApplicationRegistrationShape](ecosystem.shex#ApplicationRegistrationShape).
Associated with resources by the
[ecot:application-registration-tree](ecosystem.tree#application-registration-tree).

A <dfn>Data Registry Set</dfn> is a [=Registry Set=] specifically made up of
[=Data Registries=]. Represented by the
[eco:DataRegistrySet](ecosystem.ttl#DataRegistrySet) class.
Validated by the
[ecos:DataRegistrySetShape](ecosystem.shex#DataRegistrySetShape).
Associated with resources by the
[ecot:data-registry-set-tree](ecosystem.tree#data-registry-set-tree).

A <dfn>Data Registry</dfn> is a collection of [=Data Registrations=], each
representing a unique type of data, stored in a specific location in a
Solid [=pod=]. Represented by the
[eco:DataRegistry](ecosystem.ttl#DataRegistry) class.
Validated by the
[ecos:DataRegistryShape](ecosystem.shex#DataRegistryShape).
Associated with resources through the
[ecot:data-registry-tree](ecosystem.tree#data-registry-tree).

A <dfn>Data Registration</dfn> provides the [=Agent=] with a place to store
[=Registered Data Instances=] of a particular type, conforming to a
given [=shape tree=]. Represented by the
[eco:DataRegistration](ecosystem.ttl#DataRegistration) class.
Validated by the
[ecos:DataRegistrationShape](ecosystem.shex#DataRegistrationShape).
Associated with resources through the
[ecot:data-registration-tree](ecosystem.tree#data-registration-tree).

A <dfn>Registered Data Instance</dfn> is a unique, stored instance of a
particular type of data conforming to a given [=shape tree=]. Each registered
data instance is contained within a given [=Data Registration=].
