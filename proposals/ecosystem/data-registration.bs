Data Registration {#datareg}
=====================

## Overview ## {#datareg-overview}

Data Registration gives [=Agents=] participating in the Solid [=ecosystem=]
a way to register, organize, and subsequently manage the data they control.

A [=Data Registry=] for storing individual [=Data Registrations=] is
introduced, implemented through the [[#reg]].

A given [=Data Registry=] provides a specific location in a Solid [=pod=] where
data of various types is organized and stored in a uniform way to aid
authorization, interoperability, discovery, and more. It avoids complex
hierarchies of data that hinder flexibility and interoperability by
employing a relatively flat hierarchy. This creates natural data boundaries
that make data authorization, amongst other things, extremely intuitive.

A [=Data Registry=] can be used for basic discovery, but it is not
designed nor intended to be an efficient means to query or index data.
However, it is *intended* to be used as reliable source data for different
query engines or indexing schemes.

## Data Model ## {#datareg-model}

<figure id="fig-datareg-model">
  <img src="diagrams/datareg-model.svg" width=100%/>
  <figcaption>Data model for data registration</figcaption>
</figure>

Data Registration extends the [[#reg-model]] with type-specific subclasses
and subproperties.

An [=Agent=] has a [=Registrar=] that links to [=Data Registry Sets=]
via the [eco:hasDataRegistrySet](ecosystem.ttl#hasDataRegistrySet) property.

A [=Data Registry Set=] links to any number of [=Data Registries=] via
the [eco:hasRegistry](ecosystem.ttl#hasRegistry) property.

A [=Data Registry=] links to any number of [=Data Registrations=]
via the [eco:hasRegistration](ecosystem.ttl#hasRegistration) property.

<figure id="fig-datareg-registrar">
  <figcaption>A [=Registrar=] at https://alice.pod.example/registries/#registrar
  linking to a [=Data Registry Set=]</figcaption>
  <pre highlight="turtle">
  <#registrar>
    a eco:Registrar;
    eco:hasDataRegistrySet &lt;https://alice.pod.example/registries/data#set&gt; .
  </pre>
  </figure>
</figure>


<figure id ="fig-datareg-registry-set">
   <figcaption>A [=Data Registry Set=] at
   https://alice.pod.example/registries/data#set linking to two different
  [=Data Registries=]</figcaption>
  <pre highlight="turtle">
  <#set>
    a eco:DataRegistrySet;
    eco:hasRegistry &lt;https://alice.pod.example/data/#registry&gt; ,
                    &lt;https://alice.otherpod.example/data/#registry&gt; .
  </pre>
</figure>

<figure id="fig-datareg-registry">
  <figcaption>A [=Data Registry=] at https://alice.pod.example/data/#registry
  linking to several [=Data Registrations=]</figcaption>
  <pre highlight="turtle">
  <#registry>
    a eco:DataRegistry ;
    eco:hasRegistration &lt;49a4057a-6ade-4a9d-9869-085a00925259/#registration&gt ,
                        &lt;cf2d40d3-858e-42f7-8b11-d021b5989ed2/#registration&gt ,
                        &lt;628a7371-3a9b-49f9-a7aa-2e9c93e0150b/#registration&gt .
  </pre>
</figure>

A [=Data Registration=] extends the
[eco:Registration](ecosystem.ttl#Registration) class with the
[eco:DataRegistration](ecosystem.ttl#DataRegistration) subclass.

A [=Data Registration=] includes any number of [=Registered Data Instances=]
via the
[eco:hasRegisteredDataInstance](ecosystem.ttl#hasRegisteredDataInstance)
property.

The [eco:DataRegistration](ecosystem.ttl#DataRegistration) subclass
extends the [eco:Registration](ecosystem.ttl#Registration) class with
the following properties:

* [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree) - URI of the
    [=shape tree=] that is being registered.
* [eco:hasRegisteredDataInstance](ecosystem.ttl#hasRegisteredDataInstance) -
    Any number of [=Registered Data Instances=] of the
    [=shape tree=] associated via
    [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree).


<figure id="fig-datareg-registration">
  <figcaption>A [=Data Registration=] at
  https://alice.pod.example/data/49a4057a-6ade-4a9d-9869-085a00925259/#registration
  linking to several [=Registered Data Instances=]</figcaption>
  <pre highlight="turtle" line-highlight="5" line-numbers="true">
  <#registration>
    a eco:DataRegistration ;
    eco:registeredBy &lt;https://alice.pod.example/profile/id#me&gt; ;
    eco:registeredWith &lt;https://app.example/id#agent&gt; ;
    eco:registeredAt "2020-04-04T20:15:47.000Z"^^xsd:dateTime .
    eco:registeredShapeTree &lt;https://tree.example/commonnote#notebook-tree&gt; ;
    eco:hasRegisteredDataInstance &lt;3f56c32e-96c6-4b0c-b941-eadc2bf98b18/#notebook&gt; ,
                                  &lt;16e1eae9-20a5-489d-8380-8c07ca3805c4/#notebook&gt; ,
                                  &lt;886785d2-6c23-46ee-9e19-5ac36b7bcd71/#notebook&gt; ,
                                  &lt;dae5015c-d5f9-4ede-b9eb-7ca7a19854a9/#notebook&gt; .
    </pre>
</figure>

## Structure and Validation ## {#datareg-structure}

The resources associated with an [=Agent's=] [=Data Registries=] conform
to and extend the general patterns detailed in Registrar [[#reg-structure]].

Consequently, this section focuses on the unique composition and validation of
[=Data Registrations=] in a [=Data Registry=], and the
[=Registered Data Instances=] contained in each [=Data Registration=].

### Structure of Data Registrations in a Data Registry ### {#datareg-registrations-structure}

<figure id="fig-datareg-registry-structure">
  <figcaption>A [=Data Registry=] at
  https://alice.pod.example/data/#registry</figcaption>
  <img src="diagrams/datareg-structure.svg" width=100%/>
</figure>

In the figure above, a [=Data Registry=] instance is stored in the RDF graph
of the `https://alice.pod.example/data/` container at `https://alice.pod.example/data/#registry`. This
[=Data Registry=] contains a set of [=Data Registrations=] (all stored in
the `https://alice.pod.example/data/` container), [as shown](#fig-datareg-registry) in the
previous section.

Each individual [=Data Registration=] is associated with one
[=shape tree=], indicated by the
[eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree) property.

<figure id="fig-datareg-registry-tree">
  <figcaption>Definition of an
  [ecot:data-registry-tree](ecosystem.tree#data-registry-tree)</figcaption>
  <pre highlight="turtle">
  <#data-registry-tree>
    a st:ShapeTree ;
    st:expectsType st:ShapeTreeContainer ;
    st:validatedBy &lt;ecos#DataRegistryShape&gt; ;
    st:contains &lt;#data-registration-tree&gt; ,
                  st:AllowNone .
  </pre>
</figure>

The [ecot:data-registry-tree](ecosystem.tree#data-registry-tree)
defines the resource structure for the [=Data Registry=], and the data
validation rules for the resources inside it.

* It assigns the
    [ecos:DataRegistryShape](ecosystem.shex#DataRegistryShape)
    to validate the [=Data Registry=] instance itself, stored in the
    graph of the container resource, [as shown](#fig-datareg-registry) in the
    previous section
* It says that the container includes instances of
    [ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
* It says through `st:AllowNone` that any resources that do not conform to
    [ecot:data-registration-tree](ecosystem.tree#data-registration-tree) are
    not allowed. This container can *only* contain resources that conform to
    [ecot:data-registration-tree](ecosystem.tree#data-registration-tree).

<figure id="fig-datareg-registration-tree">
  <figcaption>Definition of an
  [ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
  </figcaption>
  <pre highlight="turtle">
  <#data-registration-tree>
    a st:ShapeTree ;
    st:expectsType st:ShapeTreeContainer ;
    st:validatedBy &lt;ecos#DataRegistrationShape&gt; ;
    st:matchesUriTemplate "{id}" .
  </pre>
</figure>

Conforming to
[ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
ensures that the [=Data Registry=] container at
`https://alice.pod.example/data/#registry` only contains valid
[=Data Registrations=].

* Any resource added to the `https://alice.pod.example/data/` container must be
    a container per `st:expectsType st:ShapeTreeContainer`.
* It assigns the
    [ecos:DataRegistrationShape](ecosystem.shex#DataRegistrationShape)
    to ensure there is a valid [=Data Registration=] instance in the
    container resource graph.

### Structure of Registered Data Instances in a Data Registration ### {#datareg-instances-structure}

A given [=Data Registration=] will contain any number of
[=Registered Data Instances=] of the [=shape tree=] associated
via [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree).

Two complementary [=shape trees=] must be assigned to the same
[=Data Registration=] to ensure:

1. It is a well-formed [=Data Registration=]
2. The [=Data Registration=] only contains [=Registered Data Instances=]
    of [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree).

<figure>
  <figcaption>A [=Data Registration=] at
  https://alice.pod.example/data/49a4057a-6ade-4a9d-9869-085a00925259/#registration
  </figcaption>
  <img src="diagrams/dataregistration-structure.svg" width=100%/>
</figure>

In the figure above, we can observe the combination of the
[ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
and the [note:note-container-tree](note.tree#note-container-tree) on the
same [=Data Registration=] at
`https://alice.pod.example/data/49a4057a-6ade-4a9d-9869-085a00925259/#registration`.

A [=Data Registration=] can't know which specific
[=shape tree=] will be registered in advance, so the
[ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
can't specify the expected contents of the container with `st:contains`.

However, it is crucial that the contents of the [=Data Registration=] container
be conformant instances of the [=shape tree=] specified in the
[eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree)
property of the [=Data Registration=].

A second [=shape tree=]
([note:note-container-tree](note.tree#note-container-tree) in the example above)
is associated with the [=Data Registration=] to ensure that what is stored
in the container are conformant instances of the
[eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree).

### Naming Registrations and Registered Data Instances ### {#datareg-naming}

The name of the [=Data Registration=] container resource MUST be a
generated \[UUID](https://www.ietf.org/rfc/rfc4122.txt).

The name of a [=Registered Data Instance=] resource linked to a
[=Data Registration=] through
[eco:hasRegisteredDataInstance](ecosystem.ttl#hasRegisteredDataInstance)
MUST be a generated \[UUID](https://www.ietf.org/rfc/rfc4122.txt).

## Permission Model ## {#datareg-permissions}

Almost all of the collaborative use cases between [=Agents=]
in the [=ecosystem=] are based on data furnished through the
[=Data Registry=].

[=Agents=] grant different levels of access to other [=Agents=] on a
case-by-case basis through [[#authz]]. Consequently, a signficant amount
of flexibility is needed in permissioning [=Data Registrations=] and
[=Registered Data Instances=], while at the same time avoiding permission
swamps that become unwieldy to manage.

<figure>
<figcaption>Permission model for [=Data Registry=] resources</figcaption>
  <table class="data permissions" align="left">
    <col>
    <col>
    <colgroup></colgroup>
    <colgroup></colgroup>
    <colgroup span=2></colgroup>
    <colgroup span=2></colgroup>
    <thead>
      <tr>
        <th></th>
        <th></th>
        <th scope="colgroup">Controller</th>
        <th scope="colgroup">Public</th>
        <th colspan=2 scope="colgroup">Selectively Trusted</th>
        <th colspan=2 scope="colgroup">Selectively Granted</th>
      </tr>
      <tr>
        <th scope="col">Resource</th>
        <th scope="col">Type</th>
        <th scope="col">Access</th>
        <th scope="col">Access</th>
        <th scope="col">Subject</th>
        <th scope="col">Access</th>
        <th scope="col">Subject</th>
        <th scope="col">Access</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>`/data/`</td>
        <td>[=Data Registry=]</td>
        <td>Control</td>
        <td>-</td>
        <td>Authorization Agent</td>
        <td>Control</td>
        <td>-</td>
        <td>-</td>
      </tr>
      <tr>
        <td>`-- /49a4057a...5259/`</td>
        <td>[=Data Registration=]</td>
        <td>Control</td>
        <td>Varies</td>
        <td>Authorization Agent</td>
        <td>Control</td>
        <td>Grantee</td>
        <td>Varies</td>
      </tr>
      <tr>
        <td>`---- /168997f0...276a/`</td>
        <td>[=Registered Data Instance=]</td>
        <td>Control</td>
        <td>Varies</td>
        <td>Authorization Agent</td>
        <td>Control</td>
        <td>Grantee</td>
        <td>Varies</td>
      </tr>
    </tbody>
  </table>
</figure>

### Access Scopes for Data Registrations ### {#datareg-scopes}

An [=Agent=] specifies the [=Data Registrations=] and
[=Registered Data Instances=] within them that other
[=Agents=] and/or [=Applications=] can access, as well as what that mode
of access will be.

It is imperative that the permission model enable patterns that
allow the [=Agent=] to make intuitive decisions, without
having to directly manipulate [=acl resources=] for individual documents
and containers throughout the [=Data Registry=].

There are two levels of access that must be considered for a given
[=Data Registration=]:

* **All Instances** - Applies to all existing and yet to be created
      [=Registered Data Instances=] within that [=Data Registration=].
* **Specific Instance** - Applies only to specific
      [=Registered Data Instances=] within that [=Data Registration=].

#### Permissions for All Registered Data Instances #### {#datareg-all}

The [=access modes=] listed in the table below can be combined as needed and
granted to a given [=Authorization Subject=].

Issue: WAC doesn't have any mechanism to extend inherited permissions. The
presence of a specific ACL on a resource negates all inherited permissions,
making it impossible to “slightly adjust” or “modify” a resource
while maintaining the permissions inherited for it.

<figure>
<figcaption>Modes of access for a [=Data Registration=]</figcaption>
  <table class="data" align="left">
    <col>
    <col>
    <thead>
      <tr>
        <th scope="col">Mode</th>
        <th scope="col">Resultant Access</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th scope="row">Read</th>
        <td>Can read all existing and yet to be created
            [=Registered Data Instances=]. Includes being able to see the full
            list of [=Registered Data Instances=] in the registration.</td>
      </tr>
      <tr>
        <th scope="row">Write</th>
        <td>Can modify the [=Data Registration=], and all existing
            [=Registered Data Instances=] within it.
            Can create new [=Registered Data Instances=],
            and can delete them.</td>
      </tr>
      <tr>
        <th scope="row">Control</th>
        <td>Can change permissions on the [=Data Registration=], as well
            as any [=Registered Data Instances=] within it.</td>
      </tr>
      <tr>
        <th scope="row">Append</th>
        <td>Can only create new [=Registered Data Instances=] within the
            [=Data Registration=].</td>
      </tr>
      <tr>
        <th scope="row">Created Resource Permissions</th>
        <td>These determine the permissions assigned to
        [=Registered Data Instances=] created by the [=Authorization Subject=],
        when that [=Authorization Subject=] has been granted Write or Append
        [=access modes=].</td>
      </tr>
    </tbody>
  </table>
</figure>

Issue: Identify the scheme through which created resource permissions are
derived if they are not specified explicitly.

Note: Given the current limitations of [[WAC]], specifically the inability
to extend inherited permissions, it is likely that managing permissions
across all [=Registered Data Instances=] of a [=Data Registrations=] will need
to be managed directly in [[#datareg-specific]], rather than inheriting
from the [=Data Registration=].

#### Permissions for a Specific Registered Data Instance #### {#datareg-specific}

The [=access modes=] listed in the table below can be combined as needed and
granted to a given [=Authorization Subject=] for a specific
[=Registered Data Instance=].

<figure>
<figcaption>Modes of access for a Specific
[=Registered Data Instance=]</figcaption>
  <table class="data" align="left">
    <col>
    <col>
    <thead>
      <tr>
        <th scope="col">Mode</th>
        <th scope="col">Resultant Access</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th scope="row">Read</th>
        <td>Can list and read all resources within the
        [=Registered Data Instance=].</td>
      </tr>
      <tr>
        <th scope="row">Write</th>
        <td>Can modify the [=Registered Data Instance=] and any resources
            within it, including creating and deleting resources.</td>
      </tr>
      <tr>
        <th scope="row">Control</th>
        <td>Can change permissions on the [=Registered Data Instance=]
            and any resources within it.</td>
      </tr>
      <tr>
        <th scope="row">Append</th>
        <td>Can create resources within the [=Registered Data Instance=].
            Can add to a resource in the [=Registered Data Instance=] but cannot
            remove anything from it, or delete it.</td>
      </tr>
      <tr>
        <th scope="row">Created Resource Permissions</th>
        <td>These determine the permissions assigned to
        resources within the [=Registered Data Instance=] created by the
        [=Authorization Subject=], when that [=Authorization Subject=] has
        been granted Write or Append [=access modes=].</td>
      </tr>
    </tbody>
  </table>
</figure>

## Registering Data ## {#datareg-registrations}

Registering data in a [=Data Registry=] is primarily concerned with the
following two operations:

* Registering new *data types* as [=Data Registrations=]
* Storing and registering new *instances of those data types* as
    [=Registered Data Instances=]

This section explains the mechanics of those operations.

Note: Managing [=Data Registrations=] and the [=Registered Data Instances=]
contained within them is inextricably linked to permissioning the data
for effective use and secure collaboration. This is covered at length
in [[#authz]].

### Enlisting the help of a trusted agent ### {#datareg-trustedagent}

In almost every case, an [=Application=] will not be trusted to manage
[=Data Registries=], and will need the assistance of a [=trusted agent=]
that has been authorized to assist with data registration for a given [=Agent=].

Untrusted [=Applications=] can enlist the help of the
[=Data Authorization Agent=]
to assist with privileged operations like registering new
[=Data Registrations=] and changing permissions.

The [=Data Authorization Agent=] trusted by a given [=Agent=] is linked
with them through the
[eco:trustsForDataAuthorization](ecosystem.ttl#trustsForDataAuthorization)
property.

<figure>
  <figcaption>[=Agent=] at https://alice.pod.example/profile/id#me linking to Data
  Authorization Agent</figcaption>
  <pre highlight="turtle">
    <#me>
      a eco:Agent;
      eco:trustsForDataAuthorization &lt;https://trusted.example/da/&gt; .
  </pre>
</figure>

An untrusted [=Application=] must work through the trusted
[=Data Authorization Agent=] anytime that [=Data Registrations=] need to be
managed or additional access is needed to the [=Agent's=] data.

Issue: Patterns to interface with Trusted Agents will be detailed
in the Trusted Agents section.

### Creating the data registration entry ### {#datareg-creating}

[=Data Registrations=] must be created in conformance with the
documented [[#datareg-structure]] pattern.

The [ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
must be assigned to the [=Data Registration=] resource.

<figure id="fig-datareg-create-registration-tree">
  <figcaption>Definition of an
  [ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
  </figcaption>
  <pre highlight="turtle">
  <#data-registration-tree>
    a st:ShapeTree ;
    st:expectsType st:ShapeTreeContainer ;
    st:validatedBy &lt;ecos#DataRegistrationShape&gt; ;
    st:matchesUriTemplate "{id}" .
  </pre>
</figure>

The [ecot:data-registration-tree](ecosystem.tree#data-registration-tree)
stipulates the following:

1. The [=Data Registration=] resource must be a container per
    `st:expectsType st:ShapeTreeContainer`.
1. The [=Data Registration=] instance data must be added to the RDF
    graph of that container, and validate successfully
    against the
    [ecos:DataRegistrationShape](ecosystem.shex#DataRegistrationShape).
1.  The [=Data Registration's=] properties must be set as follows:
    * [eco:registeredBy](ecosystem.ttl#registeredBy): linked to the [=identity=]
        of the [=authenticated agent=] that invoked the registration
        (i.e. the [=webid=] of the [=Agent=])
    * [eco:registeredWith](ecosystem.ttl#registeredWith): linked to the
        [=ApplicationID=] of the [=trusted agent=] that facilitated the
        registration, typically the [=data authorization agent=].
    * [eco:registeredAt](ecosystem.ttl#registeredAt): the `xsd:dateTime` of
        the registration.
    * [eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree): URI of the
        [=shape tree=] that is being registered.

The [=shape tree=] associated with the [=Data Registration=] via
[eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree)
must also be assigned to [=Data Registration=] resource,
per the instructions in [[#datareg-structure]]. This ensures that only
instances of that particular shape tree are added to the container.

The [eco:hasRegisteredDataInstance](ecosystem.ttl#hasRegisteredDataInstance)
property is not populated until the first [=Registered Data Instance=] is
added to the [=Data Registration=].

The [=Data Registration=] container must be named in
accordance with the instructions in [[#datareg-naming]].

The [=Data Registration=] container must be added as a child
member of the [=Data Registry=] container.

Access to the [=Data Registration=] must be set per the
instructions in [[#datareg-permissions]].

The [=Data Registration=] must be associated with the
[=Data Registry=] through the
[eco:hasRegistry](ecosystem.ttl#hasRegistry) property in
the graph of the [=Data Registry=].


### Creating registered data instances ### {#datareg-instances}

Creation of [=Registered Data Instances=] is a matter of storing instance
resources in conformance with the
[eco:registeredShapeTree](ecosystem.ttl#registeredShapeTree).

Each new [=Registered Data Instance=] must be linked to the
[=Data Registration=] via
[eco:hasRegisteredDataInstance](ecosystem.ttl#hasRegisteredDataInstance).
